/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulador;

import Desenho.DesenhoEstadoMealy;
import Desenho.Visualizacao;
import TelaPrincipal.TelaPrincipal;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Vinicius
 */
public class FramePrincipalMealy extends javax.swing.JFrame {
    private Dimension area;    
    private int x,y;
    private ArrayList<Estado> estados = new ArrayList();    
    private int n;
    public DesenhoEstadoMealy estadoSelecionado;
    public DesenhoEstadoMealy estadoInicial = null;
      
    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipalMealy(TelaPrincipal tela) {
        initComponents();         
        area = new Dimension(0,0);      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        popup_menu = new javax.swing.JPopupMenu();
        menu_inicial = new javax.swing.JCheckBoxMenuItem();
        menu_alterar_nome = new javax.swing.JMenuItem();
        ExcluirTransicoes = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        simboloComboBox = new javax.swing.JComboBox<>();
        estadoDestinoComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        estadoSelecionadoLabel = new javax.swing.JLabel();
        salvarImagem = new javax.swing.JFileChooser();
        multiplasEntradas = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        salvarAutomato = new javax.swing.JFileChooser();
        abrirAutomato = new javax.swing.JFileChooser();
        editor = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        editar = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/editar.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        estado_botao = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/estado.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        transicao = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/transicao.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        excluir = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/caveira.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new Visualizacao(estados);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        Novo = new javax.swing.JMenuItem();
        salvar = new javax.swing.JMenuItem();
        salvar_imagem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        multiplas = new javax.swing.JMenuItem();
        unica = new javax.swing.JMenuItem();

        buttonGroup1.add(editar);
        buttonGroup1.add(estado_botao);
        buttonGroup1.add(transicao);
        buttonGroup1.add(excluir);

        menu_inicial.setText("Inicial");
        menu_inicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_inicialActionPerformed(evt);
            }
        });
        popup_menu.add(menu_inicial);

        menu_alterar_nome.setText("Alterar Nome");
        menu_alterar_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_alterar_nomeActionPerformed(evt);
            }
        });
        popup_menu.add(menu_alterar_nome);

        ExcluirTransicoes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ExcluirTransicoes.setTitle("Excluir Transic√µes ou Estado");
        ExcluirTransicoes.setAlwaysOnTop(true);
        ExcluirTransicoes.setResizable(false);
        ExcluirTransicoes.setSize(new java.awt.Dimension(400, 300));
        ExcluirTransicoes.getContentPane().setLayout(new java.awt.GridBagLayout());
        ExcluirTransicoes.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                ExcluirTransicoes.dispose();
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                simboloComboBox.setModel( modelo );
                jCheckBox1.setSelected(false);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Estado Destino:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 15, 3, 0);
        ExcluirTransicoes.getContentPane().add(jLabel1, gridBagConstraints);

        jCheckBox1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jCheckBox1.setText("Excluir estado selecionado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 13, 16, 0);
        ExcluirTransicoes.getContentPane().add(jCheckBox1, gridBagConstraints);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Excluir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 16, 12, 0);
        ExcluirTransicoes.getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Fechar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 17, 0);
        ExcluirTransicoes.getContentPane().add(jButton2, gridBagConstraints);

        simboloComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        simboloComboBox.setMinimumSize(new java.awt.Dimension(68, 28));
        simboloComboBox.setPreferredSize(new java.awt.Dimension(68, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 15, 0, 21);
        ExcluirTransicoes.getContentPane().add(simboloComboBox, gridBagConstraints);

        estadoDestinoComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        estadoDestinoComboBox.setMinimumSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox.setPreferredSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estadoDestinoComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 26);
        ExcluirTransicoes.getContentPane().add(estadoDestinoComboBox, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("S√≠mbolo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 15, 0, 0);
        ExcluirTransicoes.getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Estado Selecionado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 15, 11, 8);
        ExcluirTransicoes.getContentPane().add(jLabel3, gridBagConstraints);

        estadoSelecionadoLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(29, 0, 6, 52);
        ExcluirTransicoes.getContentPane().add(estadoSelecionadoLabel, gridBagConstraints);

        salvarImagem.setAcceptAllFileFilterUsed(false);
        salvarImagem.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        salvarImagem.addChoosableFileFilter(new FileNameExtensionFilter("Imagem PNG","png"));

        multiplasEntradas.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        multiplasEntradas.setTitle("M√∫ltiplas Entradas");
        multiplasEntradas.setAlwaysOnTop(true);
        multiplasEntradas.setResizable(false);
        multiplasEntradas.setSize(new java.awt.Dimension(600, 420));
        multiplasEntradas.getContentPane().setLayout(new java.awt.GridBagLayout());
        multiplasEntradas.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                multiplasEntradas.dispose();
                limparTabela(jTable1);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Entrada", "Sa√≠da"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(300);
        jTable1.getColumnModel().getColumn(0).setMinWidth(300);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(300);
        jTable1.getColumnModel().getColumn(1).setMinWidth(300);
        jTable1.setRowHeight(25);
        jTable1.getTableHeader().setFont( new java.awt.Font("Tahoma", 0, 16));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 534;
        gridBagConstraints.ipady = 325;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        multiplasEntradas.getContentPane().add(jScrollPane2, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Verificar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 11, 0);
        multiplasEntradas.getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Limpar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 201, 11, 0);
        multiplasEntradas.getContentPane().add(jButton4, gridBagConstraints);

        salvarAutomato.addChoosableFileFilter(new FileNameExtensionFilter("M√°quina de Mealy","mea"));
        salvarAutomato.setAcceptAllFileFilterUsed(false);
        salvarAutomato.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        abrirAutomato.addChoosableFileFilter(new FileNameExtensionFilter("M√°quina de Mealy","mea"));
        abrirAutomato.setAcceptAllFileFilterUsed(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("M√°quina de Mealy");
        setSize(new java.awt.Dimension(800, 600));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        editar.setToolTipText("Editar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 9, 0, 2);
        jPanel2.add(editar, gridBagConstraints);

        estado_botao.setToolTipText("Criar estado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(estado_botao, gridBagConstraints);

        transicao.setToolTipText("Criar transi√ß√£o");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(transicao, gridBagConstraints);

        excluir.setToolTipText("Excluir");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(excluir, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(700, 400));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 400));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 554;
        gridBagConstraints.ipady = 230;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 11, 10);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        editor.addTab("Editor", jPanel2);

        jMenu1.setText("Arquivo");

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        Novo.setText("Novo");
        Novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NovoActionPerformed(evt);
            }
        });
        jMenu1.add(Novo);

        salvar.setText("Salvar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        jMenu1.add(salvar);

        salvar_imagem.setText("Salvar Imagem");
        salvar_imagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar_imagemActionPerformed(evt);
            }
        });
        jMenu1.add(salvar_imagem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Entrada");

        multiplas.setText("M√∫ltiplas");
        multiplas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplasActionPerformed(evt);
            }
        });
        jMenu2.add(multiplas);

        unica.setText("√önica");
        unica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unicaActionPerformed(evt);
            }
        });
        jMenu2.add(unica);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        // TODO add your handling code here:
        if(excluir.isSelected())
            jPanel1.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon(getClass().getResource("/icones/x.png")).getImage(),new Point(10,10),"custom cursor"));
       
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseExited
        // TODO add your handling code here:
        jPanel1.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jPanel1MouseExited

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        if(estado_botao.isSelected()){
        final int W = 60;
        final int H = 60;
     
        boolean changed = false;             
        if (evt.getButton() == 1) {
                   
            x = evt.getX() - W/2;
            y = evt.getY() - H/2;
            if (x < 0) x = 2;
            if (y < 0) y = 2;  
            Point p = new Point(0,0); 
            estados.add(new Estado("q"+n, false, false,p)); 
            estados.get(estados.size()-1).setXCentral(evt.getX());
            estados.get(estados.size()-1).setYCentral(evt.getY());
            n++;
            DesenhoEstadoMealy d = new DesenhoEstadoMealy(estados.get(estados.size()-1), this);          
            d.setLocation(x, y);
            jPanel1.add(d); 
            
            int this_width = (x + W + 2);
            if (this_width > area.width) {
                area.width = this_width; changed=true;
            }
 
            int this_height = (y + H + 2);
            if (this_height > area.height) {
                area.height = this_height; changed=true;
            }
        }
        if (changed) {
            //Update client's preferred size because
            //the area taken up by the graphics has
            //gotten larger or smaller (if cleared).
            jPanel1.setPreferredSize(area);
 
            //Let the scroll pane know to update itself
            //and its scrollbars.
            jPanel1.revalidate();
        }
        jPanel1.repaint();             
        }        
       
    }//GEN-LAST:event_jPanel1MousePressed

    private void menu_inicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_inicialActionPerformed
        // TODO add your handling code here:
        if (estadoInicial == null){ // N√£o tem ainda estado final 
                estadoSelecionado.getEstado().setInicial(true);                
                estadoInicial = estadoSelecionado;
                estadoInicial.repaint();
                jPanel1.repaint();
        }
        
        else{ //J√° tem estado Inicial
            if(estadoInicial == estadoSelecionado){  //Tirando o estado Inicial de um estado que j√° √© inicial              
                estadoSelecionado.getEstado().setInicial(false);
                estadoInicial = null;
                repaint();                                        
            } 
            else{                
                estadoSelecionado.getEstado().setInicial(true);
                estadoInicial.getEstado().setInicial(false);
                estadoInicial = estadoSelecionado;                
                repaint(); 
            }
            
        }
    }//GEN-LAST:event_menu_inicialActionPerformed

    private void menu_alterar_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_alterar_nomeActionPerformed
        // TODO add your handling code here:
        String s = JOptionPane.showInputDialog(this,
            "Digite o novo nome para o estado: ","Alterar Nome", JOptionPane.PLAIN_MESSAGE);
        if(s!= null && !s.equals("")){
            estadoSelecionado.getEstado().setNome(s);
            repaint();
        }
        
    }//GEN-LAST:event_menu_alterar_nomeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:       
        setEnabled(true); 
        ExcluirTransicoes.dispose();    
        estadoSelecionado = null;
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        simboloComboBox.setModel( modelo );
        jCheckBox1.setSelected(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        if(jCheckBox1.isSelected()){
            setEnabled(true); 
            ExcluirTransicoes.dispose();            
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            simboloComboBox.setModel( modelo );
            jCheckBox1.setSelected(false);
            
            //Remove todas as transi√ß√µes de outros estados para o estado que vai ser removido
            removeTransicoes();
           
            if(estadoSelecionado.getEstado().isInicial())
                estadoInicial = null;
            
            Iterator<Estado> iter = estados.iterator(); // Removendo estado da lista de estados
            while(iter.hasNext()){
                Estado e = iter.next();
                if(e.getNome().equals(estadoSelecionado.getEstado().getNome()))
                    iter.remove();
            }
            
            jPanel1.remove(estadoSelecionado);
            estadoSelecionado = null;
            
            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
        }
        else{
            if(estadoDestinoComboBox.getSelectedIndex() != -1 && simboloComboBox.getSelectedIndex() != -1){
            Transicao tt = null;

            for(Transicao tr :  estadoSelecionado.getEstado().getTransicoes()) { 
               if(tr.getEstadoDestino().getNome().equals((String)estadoDestinoComboBox.getSelectedItem())){
                    tt = tr;
                    break;
               }
            }
            
            for(String apagar : tt.getSimbolo()){ 
               if(apagar.equals((String)simboloComboBox.getSelectedItem())){
                  tt.getSimbolo().remove(apagar);
                 
                  DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                  
                  for ( String s : tt.getSimbolo() )
                        modelo.addElement( s );

                  simboloComboBox.setModel( modelo );
                  
                  if(tt.getSimbolo().size() == 0)
                      estadoSelecionado.getEstado().getTransicoes().remove(tt);
                      
                  break;
               }
            }
            
            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
        
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void removeTransicoes(){
        //Remove todas as transi√ß√µes para o estado que ser√° exclu√≠do
        
        for(Estado e : estados){
            Iterator<Transicao> t = e.getTransicoes().iterator();
            while(t.hasNext()){
            Transicao tr = t.next();
            
            if(tr.getEstadoDestino().getNome().equals(estadoSelecionado.getEstado().getNome()))
                t.remove();
            }        
        }                
    }
    
    private void estadoDestinoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadoDestinoComboBoxItemStateChanged
        // TODO add your handling code here:
      //add actionlistner to listen for change
   
     
            Transicao tt = null;

            for(Transicao tr :  estadoSelecionado.getEstado().getTransicoes()) { 
               if(tr.getEstadoDestino().getNome().equals((String)estadoDestinoComboBox.getSelectedItem())){
                    tt = tr;
                    break;
               }
            }
        
            if(tt != null){
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();

                for ( String s : tt.getSimbolo() )
                    modelo.addElement( s );

                  simboloComboBox.setModel( modelo );
             }

                    
                

            
    }//GEN-LAST:event_estadoDestinoComboBoxItemStateChanged

    private void NovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NovoActionPerformed
        // TODO add your handling code here:
       area = new Dimension(0,0);    
       x = 0;
       y = 0;
       estados = new ArrayList();   
       n = 0;
       estadoSelecionado = null;
       estadoInicial = null;
       
       ((Visualizacao)jPanel1).setEstados(estados);
       jPanel1.repaint();
       jPanel1.removeAll();      
       
      
      
    }//GEN-LAST:event_NovoActionPerformed

    private void salvar_imagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvar_imagemActionPerformed
        // TODO add your handling code here:
                    BufferedImage image = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_RGB);
                    Graphics2D g = image.createGraphics();
                    jPanel1.printAll(g);
                    g.dispose();
                    int result = salvarImagem.showSaveDialog(this);
                     if (result == salvarImagem.APPROVE_OPTION) {
                        File file = salvarImagem.getSelectedFile();
                        String f = file.getPath();
                        if (!f.endsWith(".png"))    
                        f += ".png"; 
                       
                         try {                        
                                ImageIO.write(image, "png", new File(f));
                            } catch (IOException exp) {
                                exp.printStackTrace();
                            }
                     }
                    
                    
                   
    }//GEN-LAST:event_salvar_imagemActionPerformed

    private void unicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unicaActionPerformed
        // TODO add your handling code here:
        String s;
        if(estadoInicial != null){
            if(verificaDeterminismo()){
                s = JOptionPane.showInputDialog(this,
                "Entrada: ","Entrada √önica", JOptionPane.PLAIN_MESSAGE);

                if(s!= null)                    
                     JOptionPane.showMessageDialog(this,verificarEntrada(s),"Sa√≠da",JOptionPane.DEFAULT_OPTION);
                    
            }
            else
                JOptionPane.showMessageDialog(this, "A M√°quina de Mealy deve ser determin√≠stica", "Advert√™ncia",
                JOptionPane.WARNING_MESSAGE);   
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE);
       
        
    }//GEN-LAST:event_unicaActionPerformed

    private void multiplasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplasActionPerformed
        // TODO add your handling code here:
        
        if(estadoInicial != null){
            if(verificaDeterminismo()){
                multiplasEntradas.setVisible(true);
                multiplasEntradas.setLocationRelativeTo(null);
                limparTabela(jTable1);
                this.setEnabled(false);
            }                
            else               
                JOptionPane.showMessageDialog(this, "A M√°quina de Mealy deve ser determin√≠stica", "Advert√™ncia",
                JOptionPane.WARNING_MESSAGE);  
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_multiplasActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        limparTabela(jTable1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int verifica = -1;  
        
        for (int i = 0; i < jTable1.getRowCount(); i++){
           if(jTable1.getValueAt(i, 0) != "")
             verifica = i;
        }
        
        for (int i = 0; i <= verifica; i++){
            jTable1.setValueAt(verificarEntrada((String)jTable1.getValueAt(i, 0)),i, 1);
           
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        
        int result = abrirAutomato.showOpenDialog(this);
        
        if (result == abrirAutomato.APPROVE_OPTION) {
        
            try {
                // TODO add your handling code here:
                area = new Dimension(0,0);    
                x = 0;
                y = 0;
                estados = new ArrayList();                 
                estadoSelecionado = null;
                estadoInicial = null;

                ((Visualizacao)jPanel1).setEstados(estados);
                jPanel1.repaint();
                jPanel1.removeAll(); 
                
                File file = abrirAutomato.getSelectedFile();
                String f = file.getPath();
                
                FileInputStream fis = new FileInputStream(f);
                ObjectInputStream ois = new ObjectInputStream(fis);
                Salvar s = (Salvar) ois.readObject();
                ois.close();
                n = s.getEstados().size();
                for(Estado e : s.getEstados()){
                    DesenhoEstadoMealy d = new DesenhoEstadoMealy(e,this);
                    d.setLocation(e.getXCentral()-30, e.getYCentral()-30);
                    if(e.isInicial())
                        estadoInicial = d;
                    jPanel1.add(d);
                }

                estados = s.getEstados();
                ((Visualizacao)jPanel1).setEstados(estados);


            } catch (FileNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_abrirActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        // TODO add your handling code here:
        Salvar s = new Salvar(estados);
        int result = salvarAutomato.showSaveDialog(this);
        if (result == salvarAutomato.APPROVE_OPTION) {
            File file = salvarAutomato.getSelectedFile();
            String f = file.getPath();
            if (!f.endsWith(".mea"))    
            f += ".mea";            
            
            try {
                FileOutputStream fos = new FileOutputStream(new File(f));
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(s);
                oos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_salvarActionPerformed
    
    public static void limparTabela(JTable table) {
        for (int i = 0; i < table.getRowCount(); i++)
           for(int j = 0; j < table.getColumnCount(); j++) 
               table.setValueAt("", i, j);      
     }
           
    private String verificarEntrada(String entrada) {                                         
        String saida = "";
        String leituraEntrada = "";       
        ArrayList<Transicao> verificaTransicao = new ArrayList(); 
        int verifica;
        
        Estado estadoAtual  = estadoInicial.getEstado();
                        
        for(int i = 0; i < entrada.length(); i++){
             
             leituraEntrada += Character.toString(entrada.charAt(i));
             
             verifica = 0;
             
             for(Transicao t : estadoAtual.getTransicoes())
                 for (String s : t.getSimbolo()){
                     int c = s.indexOf(" ; ");                      
                     if( s.substring(0,c).startsWith(leituraEntrada)){
                         verificaTransicao.add(t);
                         verifica++;
                     }
               
                 }
             if(verifica!=0){
                 for(Transicao t : verificaTransicao)
                     for (String s : t.getSimbolo()){
                         int c = s.indexOf(" ; ");
                         if(s.substring(0,c).equals(leituraEntrada)){
                             estadoAtual = t.getEstadoDestino();
                             if(!s.substring(c+3, s.length()).equals("Œª"))
                                saida += s.substring(c+3, s.length());
                             leituraEntrada = "";
                             break;
                         }
                    }
             verificaTransicao.clear();
             }   
             else 
                 return saida;
             
             
        }
        return saida; 
    }
    
    private boolean verificaDeterminismo (){
        
        for(Estado e : estados)
            for(Transicao t : e.getTransicoes()){
                 for(String s : t.getSimbolo()){
                        int i = s.indexOf(" ; ");                        
                        if(s.substring(0,i).equals("Œª"))
                            return false;
                        for(Transicao t2 : e.getTransicoes())
                            if (t != t2){
                                for(String s2 : t2.getSimbolo()){
                                    int j = s2.indexOf(" ; "); 
                                    if(s.substring(0,i).equals(s2.substring(0,j))||s2.substring(0,j).startsWith(s.substring(0,i)))
                                        return false;
                                }
                            }
                            else{
                                for(String s2 : t2.getSimbolo()){
                                    int j = s2.indexOf(" ; "); 
                                    if(!s.substring(0,i).equals(s2.substring(0,j)))
                                        if(s2.substring(0,j).startsWith(s.substring(0,i)))
                                           return false;
                                }
                            }
                    }
                
            }
        
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    
   
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JDialog ExcluirTransicoes;
    private javax.swing.JMenuItem Novo;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JFileChooser abrirAutomato;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JToggleButton editar;
    private javax.swing.JTabbedPane editor;
    public javax.swing.JComboBox<String> estadoDestinoComboBox;
    public javax.swing.JLabel estadoSelecionadoLabel;
    private javax.swing.JToggleButton estado_botao;
    public javax.swing.JToggleButton excluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public javax.swing.JMenuItem menu_alterar_nome;
    public javax.swing.JCheckBoxMenuItem menu_inicial;
    private javax.swing.JMenuItem multiplas;
    private javax.swing.JDialog multiplasEntradas;
    public javax.swing.JPopupMenu popup_menu;
    private javax.swing.JMenuItem salvar;
    private javax.swing.JFileChooser salvarAutomato;
    private javax.swing.JFileChooser salvarImagem;
    private javax.swing.JMenuItem salvar_imagem;
    public javax.swing.JComboBox<String> simboloComboBox;
    public javax.swing.JToggleButton transicao;
    private javax.swing.JMenuItem unica;
    // End of variables declaration//GEN-END:variables
}
