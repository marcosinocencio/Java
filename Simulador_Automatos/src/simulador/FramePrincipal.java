/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulador;

import Desenho.DesenhoEstado;
import Desenho.Visualizacao;
import Gramatica.GramaticaConversor;
import Gramatica.GrammarController;
import Gramatica.GrammarModel.Pair;
import Gramatica.GrammarView;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Vinicius
 */
public class FramePrincipal extends javax.swing.JFrame {
    private Dimension area;    
    private int x,y;
    private ArrayList<Estado> estados = new ArrayList();
    private ArrayList<EstadoConversao> passoapasso = new ArrayList();
    private int n;
    public DesenhoEstado estadoSelecionado;
    public DesenhoEstado estadoInicial = null;
   
    public class EstadoConversao{
        
        private String nome;
        private boolean inicial;
        private boolean estFinal;
        private ArrayList< TransicaoEstadoConversao > transicoes;
        private ArrayList<Estado> estados;
        private boolean marcado;
        
        public EstadoConversao( String nome, ArrayList<Estado> estados, boolean inicial, boolean estFinal, boolean marcado ) {
            this.nome = nome;
            this.inicial = inicial;
            this.estFinal = estFinal;
            this.estados = estados;
            this.marcado = marcado;
            transicoes = new ArrayList<>();
        }

        public String getNome() {
            return nome;
        }

        public void setNome(String nome) {
            this.nome = nome;
        }

        public boolean isInicial() {
            return inicial;
        }

        public void setInicial(boolean inicial) {
            this.inicial = inicial;
        }

        public boolean isEstFinal() {
            return estFinal;
        }

        public void setEstFinal(boolean estFinal) {
            this.estFinal = estFinal;
        }

        public ArrayList<TransicaoEstadoConversao> getTransicoes() {
            return transicoes;
        }

        public ArrayList<Estado> getEstados() {
            return estados;
        }       

        public boolean isMarcado() {
            return marcado;
        }

        public void setMarcado(boolean marcado) {
            this.marcado = marcado;
        }
        
        
    }
    
    public class TransicaoEstadoConversao{
    private TreeSet<String> simbolo;
    private EstadoConversao estadoDestino;
    
    public TransicaoEstadoConversao (TreeSet<String> simbolo, EstadoConversao estadoDestino){
        this.simbolo = simbolo;
        this.estadoDestino = estadoDestino;    
    }
    
     public EstadoConversao getEstadoDestino() {
        return estadoDestino;
    }
     
     public TreeSet<String> getSimbolo() {
        return simbolo;
    } 
}
    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();         
        area = new Dimension(0,0);      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        popup_menu = new javax.swing.JPopupMenu();
        menu_final = new javax.swing.JCheckBoxMenuItem();
        menu_inicial = new javax.swing.JCheckBoxMenuItem();
        menu_alterar_nome = new javax.swing.JMenuItem();
        ExcluirTransicoes = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        simboloComboBox = new javax.swing.JComboBox<>();
        estadoDestinoComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        estadoSelecionadoLabel = new javax.swing.JLabel();
        salvarImagem = new javax.swing.JFileChooser();
        multiplasEntradas = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        salvarAutomato = new javax.swing.JFileChooser();
        abrirAutomato = new javax.swing.JFileChooser();
        editor = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        editar = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/editar.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        estado_botao = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/estado.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        transicao = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/transicao.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        excluir = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/caveira.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new Visualizacao(estados);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        Novo = new javax.swing.JMenuItem();
        salvar = new javax.swing.JMenuItem();
        salvar_imagem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        afParaEr = new javax.swing.JMenuItem();
        afParaGr = new javax.swing.JMenuItem();
        erParaAf = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        multiplas = new javax.swing.JMenuItem();
        passo = new javax.swing.JMenuItem();
        unica = new javax.swing.JMenuItem();

        buttonGroup1.add(editar);
        buttonGroup1.add(estado_botao);
        buttonGroup1.add(transicao);
        buttonGroup1.add(excluir);

        menu_final.setText("Final");
        menu_final.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_finalActionPerformed(evt);
            }
        });
        popup_menu.add(menu_final);

        menu_inicial.setText("Inicial");
        menu_inicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_inicialActionPerformed(evt);
            }
        });
        popup_menu.add(menu_inicial);

        menu_alterar_nome.setText("Alterar Nome");
        menu_alterar_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_alterar_nomeActionPerformed(evt);
            }
        });
        popup_menu.add(menu_alterar_nome);

        ExcluirTransicoes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ExcluirTransicoes.setTitle("Excluir Transic√µes ou Estado");
        ExcluirTransicoes.setAlwaysOnTop(true);
        ExcluirTransicoes.setResizable(false);
        ExcluirTransicoes.setSize(new java.awt.Dimension(400, 300));
        ExcluirTransicoes.getContentPane().setLayout(new java.awt.GridBagLayout());
        ExcluirTransicoes.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                ExcluirTransicoes.dispose();
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                simboloComboBox.setModel( modelo );
                jCheckBox1.setSelected(false);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Estado Destino:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 15, 3, 0);
        ExcluirTransicoes.getContentPane().add(jLabel1, gridBagConstraints);

        jCheckBox1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jCheckBox1.setText("Excluir estado selecionado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 13, 16, 0);
        ExcluirTransicoes.getContentPane().add(jCheckBox1, gridBagConstraints);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Excluir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 16, 12, 0);
        ExcluirTransicoes.getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Fechar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 17, 0);
        ExcluirTransicoes.getContentPane().add(jButton2, gridBagConstraints);

        simboloComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        simboloComboBox.setMinimumSize(new java.awt.Dimension(68, 28));
        simboloComboBox.setPreferredSize(new java.awt.Dimension(68, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 15, 0, 21);
        ExcluirTransicoes.getContentPane().add(simboloComboBox, gridBagConstraints);

        estadoDestinoComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        estadoDestinoComboBox.setMinimumSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox.setPreferredSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estadoDestinoComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 26);
        ExcluirTransicoes.getContentPane().add(estadoDestinoComboBox, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("S√≠mbolo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 15, 0, 0);
        ExcluirTransicoes.getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Estado Selecionado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 15, 11, 8);
        ExcluirTransicoes.getContentPane().add(jLabel3, gridBagConstraints);

        estadoSelecionadoLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(29, 0, 6, 52);
        ExcluirTransicoes.getContentPane().add(estadoSelecionadoLabel, gridBagConstraints);

        salvarImagem.setAcceptAllFileFilterUsed(false);
        salvarImagem.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        salvarImagem.addChoosableFileFilter(new FileNameExtensionFilter("Imagem PNG","png"));

        multiplasEntradas.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        multiplasEntradas.setTitle("M√∫ltiplas Entradas");
        multiplasEntradas.setAlwaysOnTop(true);
        multiplasEntradas.setResizable(false);
        multiplasEntradas.setSize(new java.awt.Dimension(600, 420));
        multiplasEntradas.getContentPane().setLayout(new java.awt.GridBagLayout());
        multiplasEntradas.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                multiplasEntradas.dispose();
                limparTabela(jTable1);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Entrada", "Resultado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(300);
        jTable1.getColumnModel().getColumn(0).setMinWidth(300);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(300);
        jTable1.getColumnModel().getColumn(1).setMinWidth(300);
        jTable1.setRowHeight(25);
        jTable1.getTableHeader().setFont( new java.awt.Font("Tahoma", 0, 16));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 534;
        gridBagConstraints.ipady = 325;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        multiplasEntradas.getContentPane().add(jScrollPane2, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Verificar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 11, 0);
        multiplasEntradas.getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Limpar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 201, 11, 0);
        multiplasEntradas.getContentPane().add(jButton4, gridBagConstraints);

        salvarAutomato.addChoosableFileFilter(new FileNameExtensionFilter("Aut√¥mato Finito","aut"));
        salvarAutomato.addChoosableFileFilter(new FileNameExtensionFilter("Arquivo JFLAP 7","jff"));
        salvarAutomato.setAcceptAllFileFilterUsed(false);
        salvarAutomato.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        abrirAutomato.addChoosableFileFilter(new FileNameExtensionFilter("Aut√¥mato Finito","aut"));
        abrirAutomato.addChoosableFileFilter(new FileNameExtensionFilter("Arquivo JFLAP 7","jff"));
        abrirAutomato.setAcceptAllFileFilterUsed(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aut√¥mato Finito");
        setSize(new java.awt.Dimension(800, 600));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        editar.setToolTipText("Editar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 9, 0, 2);
        jPanel2.add(editar, gridBagConstraints);

        estado_botao.setToolTipText("Criar estado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(estado_botao, gridBagConstraints);

        transicao.setToolTipText("Criar transi√ß√£o");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(transicao, gridBagConstraints);

        excluir.setToolTipText("Excluir");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(excluir, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(700, 400));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 400));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 554;
        gridBagConstraints.ipady = 230;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 11, 10);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        editor.addTab("Editor", jPanel2);

        jMenu1.setText("Arquivo");

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        Novo.setText("Novo");
        Novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NovoActionPerformed(evt);
            }
        });
        jMenu1.add(Novo);

        salvar.setText("Salvar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        jMenu1.add(salvar);

        salvar_imagem.setText("Salvar Imagem");
        salvar_imagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar_imagemActionPerformed(evt);
            }
        });
        jMenu1.add(salvar_imagem);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Converter");

        afParaEr.setText("Aut√¥mato Finito para Express√£o Regular");
        afParaEr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afParaErActionPerformed(evt);
            }
        });
        jMenu3.add(afParaEr);

        afParaGr.setText("Aut√¥mato Finito para Gram√°tica");
        afParaGr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afParaGrActionPerformed(evt);
            }
        });
        jMenu3.add(afParaGr);

        erParaAf.setText("Express√£o Regular para Aut√¥mato Finito");
        erParaAf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erParaAfActionPerformed(evt);
            }
        });
        jMenu3.add(erParaAf);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Entrada");

        multiplas.setText("M√∫ltiplas");
        multiplas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplasActionPerformed(evt);
            }
        });
        jMenu2.add(multiplas);

        passo.setText("Passo a passo");
        passo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passoActionPerformed(evt);
            }
        });
        jMenu2.add(passo);

        unica.setText("√önica");
        unica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unicaActionPerformed(evt);
            }
        });
        jMenu2.add(unica);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        // TODO add your handling code here:
        if(excluir.isSelected())
            jPanel1.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon(getClass().getResource("/icones/x.png")).getImage(),new Point(10,10),"custom cursor"));
       
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseExited
        // TODO add your handling code here:
        jPanel1.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jPanel1MouseExited

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        if(estado_botao.isSelected()){
        final int W = 60;
        final int H = 60;
     
        boolean changed = false;             
        if (evt.getButton() == 1) {
                   
            x = evt.getX() - W/2;
            y = evt.getY() - H/2;
            if (x < 0) x = 2;
            if (y < 0) y = 2;  
            Point p = new Point(0,0); 
            estados.add(new Estado("q"+n, false, false,p)); 
            estados.get(estados.size()-1).setXCentral(evt.getX());
            estados.get(estados.size()-1).setYCentral(evt.getY());
            n++;
            DesenhoEstado d = new DesenhoEstado(estados.get(estados.size()-1), this);          
            d.setLocation(x, y);
            jPanel1.add(d); 
            
            int this_width = (x + W + 2);
            if (this_width > area.width) {
                area.width = this_width; changed=true;
            }
 
            int this_height = (y + H + 2);
            if (this_height > area.height) {
                area.height = this_height; changed=true;
            }
        }
        if (changed) {
            //Update client's preferred size because
            //the area taken up by the graphics has
            //gotten larger or smaller (if cleared).
            jPanel1.setPreferredSize(area);
 
            //Let the scroll pane know to update itself
            //and its scrollbars.
            jPanel1.revalidate();
        }
        jPanel1.repaint();             
        }        
       
    }//GEN-LAST:event_jPanel1MousePressed

    private void menu_finalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_finalActionPerformed
        // TODO add your handling code here:
        if(!menu_final.isSelected()){
            estadoSelecionado.getEstado().setFinal(false);
            repaint();
        }
        else {
            estadoSelecionado.getEstado().setFinal(true);
            repaint();
        }
    }//GEN-LAST:event_menu_finalActionPerformed

    private void menu_inicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_inicialActionPerformed
        // TODO add your handling code here:
        if (estadoInicial == null){ // N√£o tem ainda estado final 
                estadoSelecionado.getEstado().setInicial(true);                
                estadoInicial = estadoSelecionado;
                estadoInicial.repaint();
                jPanel1.repaint();
        }
        
        else{ //J√° tem estado Inicial
            if(estadoInicial == estadoSelecionado){  //Tirando o estado Inicial de um estado que j√° √© inicial              
                estadoSelecionado.getEstado().setInicial(false);
                estadoInicial = null;
                repaint();                                        
            } 
            else{                
                estadoSelecionado.getEstado().setInicial(true);
                estadoInicial.getEstado().setInicial(false);
                estadoInicial = estadoSelecionado;                
                repaint(); 
            }
            
        }
    }//GEN-LAST:event_menu_inicialActionPerformed

    private void menu_alterar_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_alterar_nomeActionPerformed
        // TODO add your handling code here:
        String s = JOptionPane.showInputDialog(this,
            "Digite o novo nome para o estado: ","Alterar Nome", JOptionPane.PLAIN_MESSAGE);
        if(s!= null && !s.equals("")){
            estadoSelecionado.getEstado().setNome(s);
            repaint();
        }
        
    }//GEN-LAST:event_menu_alterar_nomeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:       
        setEnabled(true); 
        ExcluirTransicoes.dispose();    
        estadoSelecionado = null;
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        simboloComboBox.setModel( modelo );
        jCheckBox1.setSelected(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        if(jCheckBox1.isSelected()){
            setEnabled(true); 
            ExcluirTransicoes.dispose();            
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            simboloComboBox.setModel( modelo );
            jCheckBox1.setSelected(false);
            
            //Remove todas as transi√ß√µes de outros estados para o estado que vai ser removido
            removeTransicoes();
           
            if(estadoSelecionado.getEstado().isInicial())
                estadoInicial = null;
            
            Iterator<Estado> iter = estados.iterator(); // Removendo estado da lista de estados
            while(iter.hasNext()){
                Estado e = iter.next();
                if(e.getNome().equals(estadoSelecionado.getEstado().getNome()))
                    iter.remove();
            }
            
            jPanel1.remove(estadoSelecionado);
            estadoSelecionado = null;
            
            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
        }
        else{
            if(estadoDestinoComboBox.getSelectedIndex() != -1 && simboloComboBox.getSelectedIndex() != -1){
            Transicao tt = null;

            for(Transicao tr :  estadoSelecionado.getEstado().getTransicoes()) { 
               if(tr.getEstadoDestino().getNome().equals((String)estadoDestinoComboBox.getSelectedItem())){
                    tt = tr;
                    break;
               }
            }
            
            for(String apagar : tt.getSimbolo()){ 
               if(apagar.equals((String)simboloComboBox.getSelectedItem())){
                  tt.getSimbolo().remove(apagar);
                 
                  DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                  
                  for ( String s : tt.getSimbolo() )
                        modelo.addElement( s );

                  simboloComboBox.setModel( modelo );
                  
                  if(tt.getSimbolo().size() == 0)
                      estadoSelecionado.getEstado().getTransicoes().remove(tt);
                      
                  break;
               }
            }
            
            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
        
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void removeTransicoes(){
        //Remove todas as transi√ß√µes para o estado que ser√° exclu√≠do
        
        for(Estado e : estados){
            Iterator<Transicao> t = e.getTransicoes().iterator();
            while(t.hasNext()){
            Transicao tr = t.next();
            
            if(tr.getEstadoDestino().getNome().equals(estadoSelecionado.getEstado().getNome()))
                t.remove();
            }        
        }                
    }
    
    private void estadoDestinoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadoDestinoComboBoxItemStateChanged
        // TODO add your handling code here:
      //add actionlistner to listen for change
   
     
            Transicao tt = null;

            for(Transicao tr :  estadoSelecionado.getEstado().getTransicoes()) { 
               if(tr.getEstadoDestino().getNome().equals((String)estadoDestinoComboBox.getSelectedItem())){
                    tt = tr;
                    break;
               }
            }
        
            if(tt != null){
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();

                for ( String s : tt.getSimbolo() )
                    modelo.addElement( s );

                  simboloComboBox.setModel( modelo );
             }

                    
                

            
    }//GEN-LAST:event_estadoDestinoComboBoxItemStateChanged

    private void NovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NovoActionPerformed
        // TODO add your handling code here:
       area = new Dimension(0,0);    
       x = 0;
       y = 0;
       estados = new ArrayList();   
       n = 0;
       estadoSelecionado = null;
       estadoInicial = null;
       
       ((Visualizacao)jPanel1).setEstados(estados);
       jPanel1.repaint();
       jPanel1.removeAll();      
       
      
      
    }//GEN-LAST:event_NovoActionPerformed

    private void salvar_imagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvar_imagemActionPerformed
        // TODO add your handling code here:
                    BufferedImage image = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_RGB);
                    Graphics2D g = image.createGraphics();
                    jPanel1.printAll(g);
                    g.dispose();
                    int result = salvarImagem.showSaveDialog(this);
                     if (result == salvarImagem.APPROVE_OPTION) {
                        File file = salvarImagem.getSelectedFile();
                        String f = file.getPath();
                        if (!f.endsWith(".png"))    
                        f += ".png"; 
                       
                         try {                        
                                ImageIO.write(image, "png", new File(f));
                            } catch (IOException exp) {
                                exp.printStackTrace();
                            }
                     }
                    
                    
                   
    }//GEN-LAST:event_salvar_imagemActionPerformed

    private void unicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unicaActionPerformed
        // TODO add your handling code here:
        String s;
        if(estadoInicial != null){
            s = JOptionPane.showInputDialog(this,
            "Entrada: ","Entrada √önica", JOptionPane.PLAIN_MESSAGE);
            
            if(s!= null)
                if(verificarEntrada(s))
                    JOptionPane.showMessageDialog(this,"A entrada foi aceita");
                else
                    JOptionPane.showMessageDialog(this,"A entrada foi rejeitada");
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE);
       
        
    }//GEN-LAST:event_unicaActionPerformed

    private void multiplasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplasActionPerformed
        // TODO add your handling code here:
        
        if(estadoInicial != null){
            multiplasEntradas.setVisible(true);
            multiplasEntradas.setLocationRelativeTo(null);
            limparTabela(jTable1);
            this.setEnabled(false);
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_multiplasActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        limparTabela(jTable1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int verifica = -1;  
        
        for (int i = 0; i < jTable1.getRowCount(); i++){
           if(jTable1.getValueAt(i, 0) != "")
             verifica = i;
        }
        
        for (int i = 0; i <= verifica; i++){
            if(verificarEntrada((String)jTable1.getValueAt(i, 0)))
                jTable1.setValueAt("Aceita",i, 1);
            else 
                jTable1.setValueAt("Rejeitada",i, 1); 
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void passoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passoActionPerformed
        // TODO add your handling code here:
        String s;
        if(estadoInicial != null){
            s = JOptionPane.showInputDialog(this,
            "Entrada: ","Passo a Passo", JOptionPane.PLAIN_MESSAGE);
            
            if(s!= null){
                passoapasso = new ArrayList();
                verificarEntrada(s);
                new PassoPasso(estados, s, passoapasso).setVisible(true);
            }
           
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_passoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        
        int result = abrirAutomato.showOpenDialog(this);
        FileFilter filtro;
        Carregar carregar;
        
        if (result == abrirAutomato.APPROVE_OPTION) {
        
            try {
                // TODO add your handling code here:
                area = new Dimension(0,0);    
                x = 0;
                y = 0;
                estados = new ArrayList();                 
                estadoSelecionado = null;
                estadoInicial = null;

                ((Visualizacao)jPanel1).setEstados(estados);
                jPanel1.repaint();
                jPanel1.removeAll(); 
                
                File file = abrirAutomato.getSelectedFile();
                String f = file.getPath();
                filtro = abrirAutomato.getFileFilter();
                
                if(filtro.getDescription().equals("Arquivo JFLAP 7")){ //Abrir arquivo XML
                    carregar = new Carregar(f);
                    
                    estados = carregar.getEstados();

                    n = estados.size();
                    for(Estado e : estados){
                        DesenhoEstado d = new DesenhoEstado(e,this);
                        d.setLocation(e.getXCentral()-30, e.getYCentral()-30);
                        if(e.isInicial())
                            estadoInicial = d;
                        jPanel1.add(d);
                    }


                     ((Visualizacao)jPanel1).setEstados(estados);                    
                    
                }
                
                else{ //Abrir arquivo no formato da aplica√ß√£o
                    FileInputStream fis = new FileInputStream(f);
                    ObjectInputStream ois = new ObjectInputStream(fis);
                    Salvar s = (Salvar) ois.readObject();
                    ois.close();

                    n = s.getEstados().size();
                    for(Estado e : s.getEstados()){
                        DesenhoEstado d = new DesenhoEstado(e,this);
                        d.setLocation(e.getXCentral()-30, e.getYCentral()-30);
                        if(e.isInicial())
                            estadoInicial = d;
                        jPanel1.add(d);
                    }

                    estados = s.getEstados();
                    ((Visualizacao)jPanel1).setEstados(estados);
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_abrirActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        // TODO add your handling code here:
        Salvar s = new Salvar(estados);
        Salvar sXML;
        FileFilter filtro;
        int result = salvarAutomato.showSaveDialog(this);
        if (result == salvarAutomato.APPROVE_OPTION) {
            
            File file = salvarAutomato.getSelectedFile();
            String f = file.getPath();
            filtro = salvarAutomato.getFileFilter();
            
            if(filtro.getDescription().equals("Arquivo JFLAP 7")){ //Salvar em XML
                if (!f.endsWith(".jff"))    
                    f += ".jff"; 
                sXML = new Salvar(estados, f);
            }
            else{ //Salvar no formato da aplica√ß√£o
                if (!f.endsWith(".aut"))    
                    f += ".aut"; 
                try {
                    FileOutputStream fos = new FileOutputStream(new File(f));
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    oos.writeObject(s);
                    oos.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_salvarActionPerformed

    private void afParaErActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afParaErActionPerformed
        // TODO add your handling code here:
        if(estadoInicial != null) {       
            int nFinal = 0;
            
            for(Estado e : estados)
                if(e.isFinal())
                    nFinal++;
            
            if(nFinal != 0)
                conversaoAfParaEr();
            else
                JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter no m√≠nimo um estado final", "Advert√™ncia",
                JOptionPane.WARNING_MESSAGE); 
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE); 
    }//GEN-LAST:event_afParaErActionPerformed

    private void afParaGrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afParaGrActionPerformed
        // TODO add your handling code here:
        if(estadoInicial != null) {       
            int nFinal = 0;
            
            for(Estado e : estados)
                if(e.isFinal())
                    nFinal++;
            
            if(nFinal != 0)
                conversaoAfParaGr();
            else
                JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter no m√≠nimo um estado final", "Advert√™ncia",
                JOptionPane.WARNING_MESSAGE); 
        }
        else
            JOptionPane.showMessageDialog(this, "O aut√¥mato deve ter um estado inicial", "Advert√™ncia",
            JOptionPane.WARNING_MESSAGE); 
    }//GEN-LAST:event_afParaGrActionPerformed

    private void erParaAfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erParaAfActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this,"N√£o est√° funcionando");
    }//GEN-LAST:event_erParaAfActionPerformed
    
    private void conversaoAfParaEr(){
          
          //M√©todo complexo de convers√£o de Aut√¥mato Finito para Express√£o Regular
          ArrayList<Estado> conversao = new ArrayList();
          ArrayList<Estado> estadosFinais = new ArrayList();
          
          int nFinal = 0;
          
          for(Estado e : estados){
              Estado novo = new Estado(e.getNome(),e.isInicial(),e.isFinal(),e.getPosicaoSaida());
              novo.setInicial(e.isInicial());
              novo.setFinal(e.isFinal());            
              for(Transicao t : e.getTransicoes()){
                  TreeSet<String> simbolos = new TreeSet();
                  for(String s : t.getSimbolo())
                      simbolos.add(s);
                  novo.getTransicoes().add(new Transicao(simbolos,t.getEstadoDestino()));                  
              }             
              conversao.add(novo);
          }
          
          //Pegando todos os estados finais do aut√¥mato
          for(Estado e : conversao)
              if(e.isFinal()){
                  nFinal++;
                  estadosFinais.add(e);
              }
          //Se o aut√¥mato s√≥ tiver um estado final
          if(estadosFinais.size()==1){
              /* 
              Se o estado inicial tamb√©m for final √© necess√°rio adicionar
              um novo estado estado final, tornar o estado inicial somente incial e 
              colocar uma transi√ß√£o lambda para o novo estado final
              */
              if(estadosFinais.get(0).isInicial()){ 
                  Point p = new Point(0,0);
                  Estado e = new Estado("final",false, true,p);
                  conversao.add(e);
                  
                  Estado c = retornaIndice(estadosFinais.get(0),conversao);                       
                  c.setFinal(false);
                  TreeSet<String> set = new TreeSet();
                  set.add("Œª");
                  c.getTransicoes().add(new Transicao(set,conversao.get(conversao.size()-1)));
               }
          }else{ /*
                 Se o aut√¥mato tiver mais de estado final √© necess√°rio adicionar
                 um novo estado estado final e, para todos os estados finais do aut√¥mato,
                 colocar transi√ß√µes lambdas para o novo estado final e torna-los n√£o finais.                   
                 */
               Point p = new Point(0,0);
               Estado e = new Estado("final",false, true,p);
               conversao.add(e);
               
               for(Estado es: estadosFinais){ 
                    Estado c = retornaIndice(es,conversao);                       
                    c.setFinal(false);
                    TreeSet<String> set = new TreeSet();
                    set.add("Œª");
                    c.getTransicoes().add(new Transicao(set,conversao.get(conversao.size()-1)));
                }                
          }
        
          /*
          Para transi√ß√µes que tem mais de um s√≠mbolo √© necess√°rio fazer uma jun√ß√£o
          Exemplo: Para a fun√ß√£o f de transi√ß√£o f(q0, {a,b,c}) = q1        
          Ap√≥s a jun√ß√£o fica: f(q0, a+b+c) = q1 
          */
         for(Estado e : conversao)
             for(Transicao t : e.getTransicoes())
                 if(t.getSimbolo().size() > 1){
                     String juncao = "";
                     for(String s : t.getSimbolo())
                         juncao += s+"+";
                     juncao = juncao.substring(0, juncao.length()-1);
                     t.getSimbolo().clear();
                     t.getSimbolo().add(juncao);
                 }
         /*
         Adicionando transi√ß√µes vazias para estados que n√£o h√° transi√ß√µes
         Exemplo: Se n√£o tiver uma transi√ß√£o de q0 para q1 ent√£o √© adicionado uma
         transi√ß√£o vazia e assim para todos os estados. Ap√≥s esse passo haver√°
         transi√ß√µes de todos os estados para todos os estados.
         */
         for(Estado e : conversao){
            for(Estado es : conversao) {
               int tem = 0;
               for(Transicao t : e.getTransicoes()){                 
                 if(t.getEstadoDestino().getNome().equals(es.getNome())){
                     tem++;
                     break;
                 }
               }
               if (tem == 0){
                  TreeSet<String> set = new TreeSet();
                  set.add("‚àÖ");
                  e.getTransicoes().add(new Transicao(set,es));
               }    
            }
         } 
         
         Transicao direta = null;
         Transicao[] usandoRemover = new Transicao[2];
         Transicao fechamento = null;
         String ex=""; 
         
         /*
         Nesse passo √© feita uma remo√ß√£o de todos os estados que n√£o 
         s√£o finais no aut√¥mato at√© que o automato tenha somente 2 estados: um estado inicial
         e um final. Na remo√ß√£o √© feita uma jun√ß√£o das transi√ß√µes que no final
         formar√° a express√£o regular.
         */
         if(conversao.size() > 2) {
            do{
               Estado remover=null;

               for(Estado e : conversao)
                 if(!e.isFinal() && !e.isInicial()){
                     remover = e;
                     break;                 
                 }   
              
               /*
               Aqui √© feita a remo√ß√£o do estado n√£o final usado como intermedi√°rio
               pega um estado origem passa pelo o estado que ser√° removido e vai para um
               estado destino. √â feita a remo√ß√£o do estado fazendo um jun√ß√£o dessas transi√ß√µes
               */
               for(Estado e : conversao){
                   if(!e.getNome().equals(remover.getNome())) {
                       for(Estado es : conversao) {
                           if(!es.getNome().equals(remover.getNome())) {
                               direta = retornaTransicao(e,es); 
                               usandoRemover[0] = retornaTransicao(e,remover);
                               usandoRemover[1] = retornaTransicao(remover,es);                           
                               fechamento = retornaTransicao(remover,remover);
                               
                               if(!direta.getSimbolo().first().equals("‚àÖ") && !usandoRemover[0].getSimbolo().first().equals("‚àÖ") && !usandoRemover[1].getSimbolo().first().equals("‚àÖ"))
                                   ex = expressao(direta.getSimbolo().first(), usandoRemover[0].getSimbolo().first(), fechamento.getSimbolo().first(), usandoRemover[1].getSimbolo().first());
                               else if(!usandoRemover[0].getSimbolo().first().equals("‚àÖ") && !usandoRemover[1].getSimbolo().first().equals("‚àÖ"))
                                   ex = expressao(usandoRemover[0].getSimbolo().first(), fechamento.getSimbolo().first(), usandoRemover[1].getSimbolo().first());
                               else
                                   ex = direta.getSimbolo().first();


                               e.getTransicoes().remove(direta);
                               TreeSet<String> valor = new TreeSet();
                               valor.add(ex);

                               e.getTransicoes().add(new Transicao(valor,es));

                           }
                       }
                   }
               }
               removerTransicoes(remover, conversao);
               conversao.remove(remover);          
           }while(conversao.size() > 2);
        }
        /*
        Quando restar apenas 2 estados no aut√¥mato, inicial e final, √© 
        formada a express√£o regular final 
        */ 
        direta = retornaTransicao(conversao.get(0),conversao.get(0)); 
        usandoRemover[0] = retornaTransicao(conversao.get(0),conversao.get(1));                                   
        fechamento = retornaTransicao(conversao.get(1),conversao.get(1));
        usandoRemover[1] = retornaTransicao(conversao.get(1),conversao.get(0)); 
         
        
        ex = expressaoFinal(direta.getSimbolo().first(), usandoRemover[0].getSimbolo().first(), fechamento.getSimbolo().first());
        
        if(!usandoRemover[1].getSimbolo().first().equals("‚àÖ")) {   
            String temp = usandoRemover[1].getSimbolo().first();
            
            if(!temp.equals("Œª"))
            ex = "("+ex+temp+")*"+ex;
        
        }  
        JOptionPane.showMessageDialog(this,ex,"Express√£o Regular",JOptionPane.DEFAULT_OPTION);
    }
    
    private String expressaoFinal(String p, String q, String r){
        //M√©todo utilizado para formar a express√£o regular final 
        
        String expressao, temp1 ,temp2, temp3;
        expressao = temp1 = temp2 = temp3 = null;
        
        if(p.equals("‚àÖ") || p.equals("Œª"))
            temp1 = "";  
        else{
            if(p.length()>1)
               temp1 = "("+p+")*"; 
            else    
               temp1 = p+"*"; 
         } 
         
       
        if(q.equals("‚àÖ") || q.equals("Œª"))
           temp2 = "";         

        
        if(r.equals("‚àÖ") || r.equals("Œª"))
           temp3 = "";
        else{
           if(r.length()>1)
              temp3 = "("+r+")*";          
           else    
              temp3 = r+"*"; 
        }
        
        if(q.contains("+") && (!temp1.equals("") || !temp3.equals("")))
               temp2 = "("+q+")";
        else
               temp2 = q;
        
        expressao = temp1+temp2+temp3; 
        
        return expressao;
    }
    
    private String expressao(String p, String q, String r, String s){
        //M√©todo utilizado na jun√ß√£o de transi√ß√µes para formar 
        //a express√£o regular final
        
        String retorno, temp1 ,temp2, temp3, temp4;
        retorno = temp1 = temp2 = temp3 = temp4 = null;
        
         if(p.equals("‚àÖ"))
            temp1 = "";  
         else
            temp1 = p; 
         
         if(q.equals("‚àÖ"))
            temp2 = "";  
         else
            temp2 = q;
         
         if(r.equals("‚àÖ"))
            temp3 = "";
         else{
            if(r.length()>1)
               temp3 = "("+r+")*"; 
            else    
               temp3 = r+"*"; 
         }
         
         if(s.equals("‚àÖ"))
            temp4 = ""; 
         else
            temp4 = s;        
         
         if(temp2.equals("Œª"))
             temp2 = "";         
                 
         if(temp3.equals("Œª") || temp3.equals("Œª*"))
            temp3 = "";
         
         if(temp4.equals("Œª"))
            temp4 = ""; 
        
         if(q.contains("+") && (!temp3.equals("") || !temp4.equals("") ))
            temp2 = "("+q+")";   
         
         if(r.contains("+") && (!temp2.equals("") || !temp4.equals("") ))
            temp3 = "("+r+")";   

         if(s.contains("+") && (!temp2.equals("") || !temp3.equals("") ))
            temp4 = "("+s+")"; 
         
         retorno = temp1+"+"+temp2+temp3+temp4;
        
        return retorno;
    }  
    
    private String expressao(String q, String r, String s){
        //M√©todo utilizado na jun√ß√£o de transi√ß√µes para formar 
        //a express√£o regular final
        
        String retorno, temp2, temp3, temp4;
        retorno = temp2 = temp3 = temp4 = null;
                 
         if(q.equals("‚àÖ"))
            temp2 = "";  
         else
            temp2 = q;
         
         if(r.equals("‚àÖ"))
            temp3 = "";
         else{
            if(r.length()>1)
               temp3 = "("+r+")*"; 
            else    
               temp3 = r+"*"; 
         }
         
         if(s.equals("‚àÖ"))
            temp4 = ""; 
         else
            temp4 = s;              
         
         if(temp2.equals("Œª"))
             temp2 = "";       
         
         if(temp3.equals("Œª") || temp3.equals("Œª*"))
             temp3 = "";
         
         if(temp4.equals("Œª"))
             temp4 = "";    
         
         if(q.contains("+") && (!temp3.equals("") || !temp4.equals("") ))
             temp2 = "("+q+")";   
         
         if(r.contains("+") && (!temp2.equals("") || !temp4.equals("") ))
             temp3 = "("+r+")";   
        
         if(s.contains("+") && (!temp2.equals("") || !temp3.equals("") ))
             temp4 = "("+s+")";   
        
         retorno = temp2+temp3+temp4;
        
        return retorno;
    } 
    
    private void removerTransicoes (Estado remover, ArrayList<Estado> conversao){
        Transicao t = null;
        for(Estado e : conversao){
            if(!e.getNome().equals(remover.getNome())){
                t = retornaTransicao(e,remover);
                e.getTransicoes().remove(t);
            }     
        }
    }
    
    private Transicao retornaTransicao (Estado inicial, Estado destino){
        Transicao t = null;
        
        for(Transicao  tt : inicial.getTransicoes()) 
            if(tt.getEstadoDestino().getNome().equals(destino.getNome()))
                 return tt;        
        
        return t;
    }
    
    public boolean verificaTransicao (int i, String a,int j){
        
        for(Transicao t : estados.get(i).getTransicoes())
            for(String s : t.getSimbolo())
                if(s.equals(a) && t.getEstadoDestino().getNome().equals(estados.get(j).getNome()))
                    return true;
        
        return false;
    }
    
    private Estado retornaIndice (Estado e, ArrayList<Estado> conversao){
        Estado retorno = null;       
        
        for(Estado c: conversao)
            if(c == e)
                return c;
            
        return retorno;
    }
    
    public static void limparTabela(JTable table) {
        for (int i = 0; i < table.getRowCount(); i++)
           for(int j = 0; j < table.getColumnCount(); j++) 
               table.setValueAt("", i, j);      
     }
           
    private boolean verificarEntrada(String entrada) {                                         
        
        String estadoAtual;       
        ArrayList<EstadoConversao> AFD = AFND_Para_AFD();
        EstadoConversao inicial = null;
        
        
        for(EstadoConversao e : AFD)
            if(e.isInicial()){
                inicial = e;
                passoapasso.add(e);
                break;   
            }
        //Coloca o estado inicial no array de estados atuais  (Incluindo e-fechamento)       
        estadoAtual = inicial.getNome();
        
        
        //verifica s√≠mbolo por s√≠mbola da entrada 
        //a partir de um s√≠mbolo verifica se h√° estados atingiveis a partir do estado inicial
        //Se houver ent√£o adiciona no array de estados atuias para a pr√≥xima itera√ß√£o
        
        for(int i = 0; i < entrada.length() ;i++){
            
            EstadoConversao e = retornaEstadoConversao(estadoAtual, AFD); //Retorna um estado no array de estados a partir de seu nome
            
            if(e==null)
                break;
            
            
            Character simbolo = entrada.charAt(i);
            int verifica = 0;   
            //Verifica se h√° transi√ß√µes para outros estados a partir do simbolo da entrada         
            for(TransicaoEstadoConversao t : e.getTransicoes())
                for(String s : t.getSimbolo())
                    if(s.equals( Character.toString(simbolo) ) ){
                        estadoAtual = t.getEstadoDestino().getNome();
                        passoapasso.add(e);
                        verifica++;
                    }
            
            if (verifica==0){
                estadoAtual = "";
                ArrayList<Estado> a = new ArrayList();
                Point p = new Point(0,0); 
                a.add(new Estado ("inv√°lido", false, false,p));
                EstadoConversao inv√°lido = new EstadoConversao("inv√°lido",a,false,false,false);
                passoapasso.add(inv√°lido);
            }
                      
        }                
       
        
        //Verifica se est√° em um estado final        
        EstadoConversao e = retornaEstadoConversao(estadoAtual,AFD);
         
        if (e!=null) {
           passoapasso.add(e);
           if(e.isEstFinal())
              return true;           
        }
        return false; 
    }
    
    private void eFechamento (TreeSet<String> estadosAtuais, String estado){
            //Faz o fechamento de um estado (todos os movimentos vazios dele para outros estados)
            
            Estado e = retornaEstado(estado); //Retorna um estado no array de estados a partir de seu nome
            
            List<Estado> lista = new ArrayList(); 
            lista.add(e);
            
            for(int i = 0; i < lista.size() ;i++){   
                e = lista.get(i);               
                       
                for(Transicao t : e.getTransicoes())
                    for(String s : t.getSimbolo())
                        if(s.equals("Œª") )
                            if(!lista.contains(t.getEstadoDestino()))
                                 lista.add(t.getEstadoDestino());                        
            
            }
            
            for(Estado a : lista)                
                estadosAtuais.add(a.getNome());            
            
    }
    
    private Estado retornaEstado (String estado){
        //Retorna um estado do AFND a partir de seu nome 
        for(Estado e : estados)
            if(e.getNome().equals(estado))
                return e;
        
        return null;
    }
    
    private EstadoConversao retornaEstadoConversao (String estado, ArrayList<EstadoConversao> estados){
        //Retorna um estado do aut√¥mato convertido a partir de seu nome 
        for(EstadoConversao e : estados)
            if(e.getNome().equals(estado))
                return e;
        
        return null;
    }
        
    private ArrayList<EstadoConversao> AFND_Para_AFD (){
        //M√©todo que converte um AFND para um AFD
        //para facilitar na hora de verificar uma entrada
        
        
        
        ArrayList<EstadoConversao> automato = new ArrayList(); //Estados do aut√¥mato convertido
        ArrayList<Estado> estadosc = new ArrayList(); //Estados do AFND
        TreeSet<String> e_fechamento = new TreeSet();  //Fechamento (movimentos vazios)
        String nome = "";
        EstadoConversao T = null; //Estado do aut√¥mato convertido
        
        //Fazendo o fechamento no estado inicial
        eFechamento(e_fechamento, estadoInicial.getEstado().getNome());
        
        //Adicionando os estados do AFND para um novo Estado do aut√¥mato convertido
        for(String nomeEstado : e_fechamento){
              estadosc.add( retornaEstado(nomeEstado) );
              nome = nome.concat(nomeEstado);
        }
        
        EstadoConversao e = new EstadoConversao(nome,estadosc,true,false,false);
        automato.add(e);
        TreeSet<String> alfabeto = new TreeSet(); 
        simbolosAlfabeto(alfabeto); //Todos os s√≠mbolos do aut√¥mato
        
        //Enquanto houver um estado do aut√¥mato convertido que n√£o foi marcado faz
        while(verificaMarcado(automato)){
            
            //Pega um estado n√£o marcado
            for(EstadoConversao t : automato)
                if(!t.isMarcado()){
                    T = t;
                    t.setMarcado(true);
                    break;
                }
            
            //Verifica todos os s√≠mbolos 
            for(String simbolo : alfabeto){
                TreeSet<String> aux = new TreeSet();
                
                
                //Verifica todas as transi√ß√µes poss√≠veis a partir de um 
                //s√≠mbolo do alfabeto
                for(Estado eConversao: T.getEstados())                  
                    for(Transicao t : eConversao.getTransicoes())
                        for(String s : t.getSimbolo())
                            if(s.equals(simbolo))                               
                               aux.add(t.getEstadoDestino().getNome());
                            
                              
                //Faz o fechamento para os estados encontrados nas transi√ß√µes
                e_fechamento.clear();
                for(String s : aux)
                    eFechamento(e_fechamento,s);                
                
                               
                nome = "";
                ArrayList<Estado> teste = new ArrayList();
                
                //Adiciona os estados do fechamento para um novo estado
                //do aut√¥mato convertido
                for(String adicionar : e_fechamento){                    
                    nome = nome.concat(adicionar);
                    teste.add(retornaEstado(adicionar));
                }                
               
                
                
                e = new EstadoConversao(nome,teste,false,false,false);
                                        
                              
                int v = 0;
                
                //Se o estado novo do aut√¥mato convertido n√£o estiver no 
                //aut√¥mato, adiciona ele no aut√¥mato
                for(EstadoConversao ec : automato)
                    if( ec.getNome().equals(e.getNome()) ){
                        v++;
                        break;
                    }
                
                if(v==0)
                    automato.add(e);                

                //Adiciona a transi√ß√£o entre os estados do aut√¥mato convertido
                TreeSet<String> set = new TreeSet();
                set.add(simbolo);
                
                
                //Verifica se a transi√ß√£o j√° n√£o existe
                boolean transicaoExiste = false;
                TransicaoEstadoConversao tExistente = null;

                for ( TransicaoEstadoConversao t : T.getTransicoes() ) {
                    if ( t.getEstadoDestino().getNome().equals(e.getNome())  ) {
                        transicaoExiste = true;
                        tExistente = t;
                        break;
                    }
                }
                
                //Sen√£o existe adiciona 
                if(!transicaoExiste)
                    automato.get(automato.indexOf(T)).getTransicoes().add(new TransicaoEstadoConversao(set,e));
                else //Adiciona somente o s√≠mbolo na transic√£o existente
                    tExistente.getSimbolo().add(simbolo);
            }          
            
        }
        
        //Se houver pelo menos um estado final do AFND em um estado do aut√¥mato convertido
        //Ent√£o seta o estado do aut√¥mato convertido para final 
        for(EstadoConversao ec : automato)
            for (Estado a : ec.getEstados())
                if(a.isFinal()){
                    ec.setEstFinal(true);
                    break;
                }
                
        return automato;
    }
    
    private boolean verificaMarcado(ArrayList<EstadoConversao> automato){
        //Verifica se um estado do aut√¥mato convertido est√° ou n√£o marcado
        for(EstadoConversao e : automato)
            if (!e.isMarcado())
                return true;
        
        return false;
    }
    
    private void simbolosAlfabeto(TreeSet<String> simbolos){
        //Pega todos os s√≠mbolos do aut√¥mato
        
         for(Estado e : estados)   
             for(Transicao t : e.getTransicoes())               
                 for(String s : t.getSimbolo())                     
                      if(!s.equals("Œª"))
                         simbolos.add(s);    


    }
    
    public void gramaticaParaAutomatoFinito(ArrayList<Estado> estadosGramatica){
                          
            int px=50, py=50;
            
            estados = estadosGramatica;
            estadoSelecionado = null;
            estadoInicial = null;
        
            n = estados.size();
            for(Estado e : estados){
                DesenhoEstado d = new DesenhoEstado(e,this);
                if( px > 700){
                    py += 100;
                    px = 50;
                }
                e.setXCentral(px+30);
                e.setYCentral(py+30);
                d.setLocation(px, py);
                px += 150;               
                if(e.isInicial())
                    estadoInicial = d;
                jPanel1.add(d);
            }
            
            for(Estado e : estados){
               for(Transicao t: e.getTransicoes()){
                   Estado temp = null;
                   for(Estado aux : estados){
                       if(aux.getNome().equals(t.getEstadoDestino().getNome())){
                        temp = aux;
                        break;
                       }
                   }
                   
                   t.setEstadoDestino(temp);
                   
               }
            }


            ((Visualizacao)jPanel1).setEstados(estados); 
            jPanel1.repaint();
            
            
    }
    
    private void conversaoAfParaGr(){
        GramaticaConversor gramaticaConversor = new GramaticaConversor();
        ArrayList<Pair> gramaticaList = gramaticaConversor.converterAFparaGramatica(estados);
        GrammarController g = new GrammarController(new GrammarView());
        g.convertAftoGr(gramaticaList);
    }
    
    /**
     * @param args the command line arguments
     */
    
   
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JDialog ExcluirTransicoes;
    private javax.swing.JMenuItem Novo;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JFileChooser abrirAutomato;
    private javax.swing.JMenuItem afParaEr;
    private javax.swing.JMenuItem afParaGr;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JToggleButton editar;
    private javax.swing.JTabbedPane editor;
    private javax.swing.JMenuItem erParaAf;
    public javax.swing.JComboBox<String> estadoDestinoComboBox;
    public javax.swing.JLabel estadoSelecionadoLabel;
    private javax.swing.JToggleButton estado_botao;
    public javax.swing.JToggleButton excluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public javax.swing.JMenuItem menu_alterar_nome;
    public javax.swing.JCheckBoxMenuItem menu_final;
    public javax.swing.JCheckBoxMenuItem menu_inicial;
    private javax.swing.JMenuItem multiplas;
    private javax.swing.JDialog multiplasEntradas;
    private javax.swing.JMenuItem passo;
    public javax.swing.JPopupMenu popup_menu;
    private javax.swing.JMenuItem salvar;
    private javax.swing.JFileChooser salvarAutomato;
    private javax.swing.JFileChooser salvarImagem;
    private javax.swing.JMenuItem salvar_imagem;
    public javax.swing.JComboBox<String> simboloComboBox;
    public javax.swing.JToggleButton transicao;
    private javax.swing.JMenuItem unica;
    // End of variables declaration//GEN-END:variables
}
