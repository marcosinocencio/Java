/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulador;


import Desenho.DesenhoEstadoTuringMulti;
import Desenho.Visualizacao;
import TelaPrincipal.TelaPrincipal;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vinicius
 */
public class FramePrincipalTuringMulti extends javax.swing.JFrame {
    private Dimension area;    
    private int x,y;
    private ArrayList<Estado> estados = new ArrayList();    
    private int n;
    public DesenhoEstadoTuringMulti estadoSelecionado;
    public DesenhoEstadoTuringMulti estadoInicial = null;
    public String[][] fita;
    public int nFitas;
    public ArrayList<EstadoPasso> passoPasso;
    
    public class EstadoPasso{
        
        Estado estado;
        int posicao;
        
        public EstadoPasso(Estado estado, int posicao){
            this.estado = estado;
            this.posicao = posicao;
        }

        public Estado getEstado() {
            return estado;
        }

        public int getPosicao() {
            return posicao;
        }       

    }
    
    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipalTuringMulti(TelaPrincipal tela, int nFitas) {
        this.nFitas = nFitas;
        initComponents();        
        area = new Dimension(0,0);
        fita = new String[nFitas][];
        for(int i = 0; i < nFitas; i++)
            fita[i] = new String[10000];       
    }
    
    public FramePrincipalTuringMulti(TelaPrincipal tela, int nFitas, JFileChooser arquivo) {
        this.nFitas = nFitas;
        initComponents();        
        area = new Dimension(0,0);
        fita = new String[nFitas][];
        for(int i = 0; i < nFitas; i++)
            fita[i] = new String[10000];
        this.abrirAutomatoCorreto(arquivo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        popup_menu = new javax.swing.JPopupMenu();
        menu_final = new javax.swing.JCheckBoxMenuItem();
        menu_inicial = new javax.swing.JCheckBoxMenuItem();
        menu_alterar_nome = new javax.swing.JMenuItem();
        menu_editar = new javax.swing.JMenuItem();
        ExcluirTransicoes = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        simboloComboBox = new JComboBoxWider();
        estadoDestinoComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        estadoSelecionadoLabel = new javax.swing.JLabel();
        salvarImagem = new javax.swing.JFileChooser();
        multiplasEntradas = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        salvarAutomato = new javax.swing.JFileChooser();
        abrirAutomato = new javax.swing.JFileChooser();
        editarTransicoes = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        simboloComboBox1 = new JComboBoxWider();
        estadoDestinoComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        estadoSelecionadoLabel1 = new javax.swing.JLabel();
        editor = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        editar = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/editar.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        estado_botao = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/estado.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        transicao = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/transicao.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        excluir = new javax.swing.JToggleButton(new ImageIcon(((new ImageIcon(getClass().getResource("/icones/caveira.png"))).getImage()).getScaledInstance(15, 15, java.awt.Image.SCALE_SMOOTH)));
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new Visualizacao(estados);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        Novo = new javax.swing.JMenuItem();
        salvar = new javax.swing.JMenuItem();
        salvar_imagem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        multiplas = new javax.swing.JMenuItem();
        passo = new javax.swing.JMenuItem();
        unica = new javax.swing.JMenuItem();

        buttonGroup1.add(editar);
        buttonGroup1.add(estado_botao);
        buttonGroup1.add(transicao);
        buttonGroup1.add(excluir);

        menu_final.setText("Final");
        menu_final.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_finalActionPerformed(evt);
            }
        });
        popup_menu.add(menu_final);

        menu_inicial.setText("Inicial");
        menu_inicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_inicialActionPerformed(evt);
            }
        });
        popup_menu.add(menu_inicial);

        menu_alterar_nome.setText("Alterar Nome");
        menu_alterar_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_alterar_nomeActionPerformed(evt);
            }
        });
        popup_menu.add(menu_alterar_nome);

        menu_editar.setText("Editar");
        menu_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_editarActionPerformed(evt);
            }
        });
        popup_menu.add(menu_editar);

        ExcluirTransicoes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ExcluirTransicoes.setTitle("Excluir Transições ou Estado");
        ExcluirTransicoes.setAlwaysOnTop(true);
        ExcluirTransicoes.setResizable(false);
        ExcluirTransicoes.setSize(new java.awt.Dimension(400, 300));
        ExcluirTransicoes.getContentPane().setLayout(new java.awt.GridBagLayout());
        ExcluirTransicoes.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                ExcluirTransicoes.dispose();
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                simboloComboBox.setModel( modelo );
                jCheckBox1.setSelected(false);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Estado Destino:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 15, 3, 0);
        ExcluirTransicoes.getContentPane().add(jLabel1, gridBagConstraints);

        jCheckBox1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jCheckBox1.setText("Excluir estado selecionado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 13, 16, 0);
        ExcluirTransicoes.getContentPane().add(jCheckBox1, gridBagConstraints);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Excluir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 16, 12, 0);
        ExcluirTransicoes.getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Fechar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 17, 0);
        ExcluirTransicoes.getContentPane().add(jButton2, gridBagConstraints);

        simboloComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        simboloComboBox.setMinimumSize(new java.awt.Dimension(68, 28));
        simboloComboBox.setPreferredSize(new java.awt.Dimension(68, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 15, 0, 21);
        ExcluirTransicoes.getContentPane().add(simboloComboBox, gridBagConstraints);

        estadoDestinoComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        estadoDestinoComboBox.setMinimumSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox.setPreferredSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estadoDestinoComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 26);
        ExcluirTransicoes.getContentPane().add(estadoDestinoComboBox, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Transição:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 15, 0, 0);
        ExcluirTransicoes.getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Estado Selecionado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 15, 11, 8);
        ExcluirTransicoes.getContentPane().add(jLabel3, gridBagConstraints);

        estadoSelecionadoLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(29, 0, 6, 52);
        ExcluirTransicoes.getContentPane().add(estadoSelecionadoLabel, gridBagConstraints);

        salvarImagem.setAcceptAllFileFilterUsed(false);
        salvarImagem.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        salvarImagem.addChoosableFileFilter(new FileNameExtensionFilter("Imagem PNG","png"));

        multiplasEntradas.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        multiplasEntradas.setTitle("Múltiplas Entradas");
        multiplasEntradas.setAlwaysOnTop(true);
        multiplasEntradas.setSize(new java.awt.Dimension(600, 420));
        multiplasEntradas.getContentPane().setLayout(new java.awt.GridBagLayout());
        multiplasEntradas.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                multiplasEntradas.dispose();
                limparTabela(jTable1);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(criaModeloTabela(nFitas));
        jScrollPane2.setViewportView(jTable1);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setRowHeight(25);
        jTable1.getTableHeader().setFont( new java.awt.Font("Tahoma", 0, 14));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 534;
        gridBagConstraints.ipady = 325;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        multiplasEntradas.getContentPane().add(jScrollPane2, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Verificar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 11, 0);
        multiplasEntradas.getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Limpar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 201, 11, 0);
        multiplasEntradas.getContentPane().add(jButton4, gridBagConstraints);

        salvarAutomato.addChoosableFileFilter(new FileNameExtensionFilter("Arquivo JFLAP 7","jff"));
        salvarAutomato.setAcceptAllFileFilterUsed(false);
        salvarAutomato.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        abrirAutomato.addChoosableFileFilter(new FileNameExtensionFilter("Arquivo JFLAP 7","jff"));
        abrirAutomato.setAcceptAllFileFilterUsed(false);

        editarTransicoes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        editarTransicoes.setTitle("Editar Transições ");
        editarTransicoes.setAlwaysOnTop(true);
        editarTransicoes.setResizable(false);
        editarTransicoes.setSize(new java.awt.Dimension(337, 240));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Estado Destino:");

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton5.setText("Editar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton6.setText("Fechar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        simboloComboBox1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        simboloComboBox1.setMinimumSize(new java.awt.Dimension(68, 28));
        simboloComboBox1.setPreferredSize(new java.awt.Dimension(68, 28));

        estadoDestinoComboBox1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        estadoDestinoComboBox1.setMinimumSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox1.setPreferredSize(new java.awt.Dimension(68, 28));
        estadoDestinoComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estadoDestinoComboBox1ItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Transição:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Estado Selecionado:");

        estadoSelecionadoLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        editarTransicoes.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                setEnabled(true);
                editarTransicoes.dispose();
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                simboloComboBox1.setModel( modelo );
            }
        });

        javax.swing.GroupLayout editarTransicoesLayout = new javax.swing.GroupLayout(editarTransicoes.getContentPane());
        editarTransicoes.getContentPane().setLayout(editarTransicoesLayout);
        editarTransicoesLayout.setHorizontalGroup(
            editarTransicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editarTransicoesLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6)
                .addGap(5, 5, 5)
                .addComponent(estadoSelecionadoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(editarTransicoesLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addGap(33, 33, 33)
                .addComponent(estadoDestinoComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(editarTransicoesLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(simboloComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(editarTransicoesLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jButton5)
                .addGap(33, 33, 33)
                .addComponent(jButton6))
        );
        editarTransicoesLayout.setVerticalGroup(
            editarTransicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editarTransicoesLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(editarTransicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(estadoSelecionadoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(editarTransicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(estadoDestinoComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(editarTransicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(simboloComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(editarTransicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton6)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Máquina de Turing");
        setSize(new java.awt.Dimension(800, 600));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        editar.setToolTipText("Editar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 9, 0, 2);
        jPanel2.add(editar, gridBagConstraints);

        estado_botao.setToolTipText("Criar estado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(estado_botao, gridBagConstraints);

        transicao.setToolTipText("Criar transição");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(transicao, gridBagConstraints);

        excluir.setToolTipText("Excluir");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 2);
        jPanel2.add(excluir, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(700, 400));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 400));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 554;
        gridBagConstraints.ipady = 230;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 11, 10);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        editor.addTab("Editor", jPanel2);

        jMenu1.setText("Arquivo");

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        Novo.setText("Novo");
        Novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NovoActionPerformed(evt);
            }
        });
        jMenu1.add(Novo);

        salvar.setText("Salvar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        jMenu1.add(salvar);

        salvar_imagem.setText("Salvar Imagem");
        salvar_imagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar_imagemActionPerformed(evt);
            }
        });
        jMenu1.add(salvar_imagem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Entrada");

        multiplas.setText("Múltiplas");
        multiplas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplasActionPerformed(evt);
            }
        });
        jMenu2.add(multiplas);

        passo.setText("Passo a passo");
        passo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passoActionPerformed(evt);
            }
        });
        jMenu2.add(passo);

        unica.setText("Única");
        unica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unicaActionPerformed(evt);
            }
        });
        jMenu2.add(unica);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        // TODO add your handling code here:
        if(excluir.isSelected())
            jPanel1.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon(getClass().getResource("/icones/x.png")).getImage(),new Point(10,10),"custom cursor"));
       
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseExited
        // TODO add your handling code here:
        jPanel1.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jPanel1MouseExited

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        if(estado_botao.isSelected()){
        final int W = 60;
        final int H = 60;
     
        boolean changed = false;             
        if (evt.getButton() == 1) {
                   
            x = evt.getX() - W/2;
            y = evt.getY() - H/2;
            if (x < 0) x = 2;
            if (y < 0) y = 2;  
            Point p = new Point(0,0); 
            estados.add(new Estado("q"+n, false, false,p)); 
            estados.get(estados.size()-1).setXCentral(evt.getX());
            estados.get(estados.size()-1).setYCentral(evt.getY());
            n++;
            DesenhoEstadoTuringMulti d = new DesenhoEstadoTuringMulti(estados.get(estados.size()-1), this, nFitas);          
            d.setLocation(x, y);
            jPanel1.add(d); 
            
            int this_width = (x + W + 2);
            if (this_width > area.width) {
                area.width = this_width; changed=true;
            }
 
            int this_height = (y + H + 2);
            if (this_height > area.height) {
                area.height = this_height; changed=true;
            }
        }
        if (changed) {
            //Update client's preferred size because
            //the area taken up by the graphics has
            //gotten larger or smaller (if cleared).
            jPanel1.setPreferredSize(area);
 
            //Let the scroll pane know to update itself
            //and its scrollbars.
            jPanel1.revalidate();
        }
        jPanel1.repaint();             
        }        
       
    }//GEN-LAST:event_jPanel1MousePressed

    private void menu_finalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_finalActionPerformed
        // TODO add your handling code here:
        if(!menu_final.isSelected()){
            estadoSelecionado.getEstado().setFinal(false);
            repaint();
        }
        else {
            estadoSelecionado.getEstado().setFinal(true);
            repaint();
        }
    }//GEN-LAST:event_menu_finalActionPerformed

    private void menu_inicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_inicialActionPerformed
        // TODO add your handling code here:
        if (estadoInicial == null){ // Não tem ainda estado final 
                estadoSelecionado.getEstado().setInicial(true);                
                estadoInicial = estadoSelecionado;
                estadoInicial.repaint();
                jPanel1.repaint();
        }
        
        else{ //Já tem estado Inicial
            if(estadoInicial == estadoSelecionado){  //Tirando o estado Inicial de um estado que já é inicial              
                estadoSelecionado.getEstado().setInicial(false);
                estadoInicial = null;
                repaint();                                        
            } 
            else{                
                estadoSelecionado.getEstado().setInicial(true);
                estadoInicial.getEstado().setInicial(false);
                estadoInicial = estadoSelecionado;                
                repaint(); 
            }
            
        }
    }//GEN-LAST:event_menu_inicialActionPerformed

    private void menu_alterar_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_alterar_nomeActionPerformed
        // TODO add your handling code here:
        String s = JOptionPane.showInputDialog(this,
            "Digite o novo nome para o estado: ","Alterar Nome", JOptionPane.PLAIN_MESSAGE);
        if(s!= null && !s.equals("")){
            estadoSelecionado.getEstado().setNome(s);
            repaint();
        }
        
    }//GEN-LAST:event_menu_alterar_nomeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:       
        setEnabled(true); 
        ExcluirTransicoes.dispose();    
        estadoSelecionado = null;
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        simboloComboBox.setModel( modelo );
        jCheckBox1.setSelected(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        if(jCheckBox1.isSelected()){
            setEnabled(true); 
            ExcluirTransicoes.dispose();            
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            simboloComboBox.setModel( modelo );
            jCheckBox1.setSelected(false);
            
            //Remove todas as transições de outros estados para o estado que vai ser removido
            removeTransicoes();
           
            if(estadoSelecionado.getEstado().isInicial())
                estadoInicial = null;
            
            Iterator<Estado> iter = estados.iterator(); // Removendo estado da lista de estados
            while(iter.hasNext()){
                Estado e = iter.next();
                if(e.getNome().equals(estadoSelecionado.getEstado().getNome()))
                    iter.remove();
            }
            
            jPanel1.remove(estadoSelecionado);
            estadoSelecionado = null;
            
            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
        }
        else{
            if(estadoDestinoComboBox.getSelectedIndex() != -1 && simboloComboBox.getSelectedIndex() != -1){
            Transicao tt = null;

            for(Transicao tr :  estadoSelecionado.getEstado().getTransicoes()) { 
               if(tr.getEstadoDestino().getNome().equals((String)estadoDestinoComboBox.getSelectedItem())){
                    tt = tr;
                    break;
               }
            }
            
            for(String apagar : tt.getSimbolo()){ 
               if(apagar.equals((String)simboloComboBox.getSelectedItem())){
                  tt.getSimbolo().remove(apagar);
                 
                  DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                  
                  for ( String s : tt.getSimbolo() )
                        modelo.addElement( s );

                  simboloComboBox.setModel( modelo );
                  
                  if(tt.getSimbolo().size() == 0)
                      estadoSelecionado.getEstado().getTransicoes().remove(tt);
                      
                  break;
               }
            }
            
            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
        
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void removeTransicoes(){
        //Remove todas as transições para o estado que será excluído
        
        for(Estado e : estados){
            Iterator<Transicao> t = e.getTransicoes().iterator();
            while(t.hasNext()){
            Transicao tr = t.next();
            
            if(tr.getEstadoDestino().getNome().equals(estadoSelecionado.getEstado().getNome()))
                t.remove();
            }        
        }                
    }
    
    private void estadoDestinoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadoDestinoComboBoxItemStateChanged
        // TODO add your handling code here:
        atualizaComboBox(estadoDestinoComboBox, simboloComboBox);           
    }//GEN-LAST:event_estadoDestinoComboBoxItemStateChanged

    private void NovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NovoActionPerformed
        // TODO add your handling code here:
       area = new Dimension(0,0);    
       x = 0;
       y = 0;
       estados = new ArrayList();   
       n = 0;
       estadoSelecionado = null;
       estadoInicial = null;
       
       ((Visualizacao)jPanel1).setEstados(estados);
       jPanel1.repaint();
       jPanel1.removeAll();      
       
      
      
    }//GEN-LAST:event_NovoActionPerformed

    private void salvar_imagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvar_imagemActionPerformed
        // TODO add your handling code here:
                    BufferedImage image = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_RGB);
                    Graphics2D g = image.createGraphics();
                    jPanel1.printAll(g);
                    g.dispose();
                    int result = salvarImagem.showSaveDialog(this);
                     if (result == salvarImagem.APPROVE_OPTION) {
                        File file = salvarImagem.getSelectedFile();
                        String f = file.getPath();
                        if (!f.endsWith(".png"))    
                        f += ".png"; 
                       
                         try {                        
                                ImageIO.write(image, "png", new File(f));
                            } catch (IOException exp) {
                                exp.printStackTrace();
                            }
                     }
                    
                    
                   
    }//GEN-LAST:event_salvar_imagemActionPerformed

    private void unicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unicaActionPerformed
        // TODO add your handling code here:
        String[] s;
        if(estadoInicial != null){
            if(verificaTransicaoFinal()){
                s = entradasDialogo(nFitas, 0);
               

                if(s[0] != null)
                    if(verificarEntrada(s))
                        JOptionPane.showMessageDialog(this,"A entrada foi aceita");
                    else
                        JOptionPane.showMessageDialog(this,"A entrada foi rejeitada");
            }
            else
                JOptionPane.showMessageDialog(this, "Há transições partindo de estados finais. Remova elas para simular a entrada", "Advertência",
                JOptionPane.WARNING_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(this, "O autômato deve ter um estado inicial", "Advertência",
            JOptionPane.WARNING_MESSAGE);
       
        
    }//GEN-LAST:event_unicaActionPerformed

    private void multiplasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplasActionPerformed
        // TODO add your handling code here:
        
        if(estadoInicial != null){
            if(verificaTransicaoFinal()){
                multiplasEntradas.setVisible(true);
                multiplasEntradas.setLocationRelativeTo(null);
                limparTabela(jTable1);
                this.setEnabled(false);
            }
            else
                JOptionPane.showMessageDialog(this, "Há transições partindo de estados finais. Remova elas para simular as entradas", "Advertência",
                JOptionPane.WARNING_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(this, "O autômato deve ter um estado inicial", "Advertência",
            JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_multiplasActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        limparTabela(jTable1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int verifica = -1;
        
        for (int i = 0; i < jTable1.getRowCount(); i++)
           for(int j = 0; j < jTable1.getColumnCount()-1; j++)
             if(!jTable1.getValueAt(i, j).equals("")){
                 verifica = i;
                 break;
             }          
        
        
        String[] entrada = new String[nFitas];
        
        for (int i = 0; i <= verifica; i++){
            for (int j = 0; j < jTable1.getColumnCount()-1; j++){
                if(jTable1.getValueAt(i, j).equals(""))
                    entrada[j] = "";
                else
                    entrada[j] = (String)jTable1.getValueAt(i,j);             
            }      
             if(verificarEntrada(entrada))
                jTable1.setValueAt("Aceita",i, nFitas);
             else 
                jTable1.setValueAt("Rejeitada",i, nFitas); 
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void passoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passoActionPerformed
        // TODO add your handling code here:
        String[] s;
        if(estadoInicial != null){
           if(verificaTransicaoFinal()){
                s = entradasDialogo(nFitas, 1);

                if(s!= null){
                   iniciaFita(fita, s);
                   new PassoPassoTuringMulti(estados, fita, estadoInicial.getEstado(), nFitas).setVisible(true);
                }
            }
           else
                JOptionPane.showMessageDialog(this, "Há transições partindo de estados finais. Remova elas para simular a entrada", "Advertência",
                JOptionPane.WARNING_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(this, "O autômato deve ter um estado inicial", "Advertência",
            JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_passoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
            abrirAutomatoMetodo();       
    }//GEN-LAST:event_abrirActionPerformed

    private void abrirAutomatoMetodo(){
        int result = abrirAutomato.showOpenDialog(this);
        
        CarregarTuringMulti carregar;
        
        if (result == abrirAutomato.APPROVE_OPTION) {        

            // TODO add your handling code here:
            area = new Dimension(0,0);    
            x = 0;
            y = 0;
            estados = new ArrayList();                 
            estadoSelecionado = null;
            estadoInicial = null;

            ((Visualizacao)jPanel1).setEstados(estados);
            jPanel1.repaint();
            jPanel1.removeAll(); 

            File file = abrirAutomato.getSelectedFile();
            String f = file.getPath();



                carregar = new CarregarTuringMulti(f);
                
                if(carregar.getnFitas() == nFitas){
                    estados = carregar.getEstados();

                    n = estados.size();
                    for(Estado e : estados){
                        DesenhoEstadoTuringMulti d = new DesenhoEstadoTuringMulti(e,this, nFitas);
                        d.setLocation(e.getXCentral()-30, e.getYCentral()-30);
                        if(e.isInicial())
                            estadoInicial = d;
                        jPanel1.add(d);
                    }


                     ((Visualizacao)jPanel1).setEstados(estados);
                }
                else{
                    
                    if (carregar.getnFitas() == 0)                        
                        new FramePrincipalTuring(new TelaPrincipal(), abrirAutomato).setVisible(true);
                      
                    else                        
                        new FramePrincipalTuringMulti(new TelaPrincipal(),carregar.getnFitas(), abrirAutomato).setVisible(true);
                    
                    this.dispose();
                }
        }
    }   
    
    private void abrirAutomatoCorreto(JFileChooser arquivo){
        
        CarregarTuringMulti carregar;
        
        area = new Dimension(0,0);    
        x = 0;
        y = 0;
        estados = new ArrayList();                 
        estadoSelecionado = null;
        estadoInicial = null;

        ((Visualizacao)jPanel1).setEstados(estados);
        jPanel1.repaint();
        jPanel1.removeAll(); 

        File file = arquivo.getSelectedFile();
        String f = file.getPath();

        carregar = new CarregarTuringMulti(f);


        estados = carregar.getEstados();

        n = estados.size();
        for(Estado e : estados){
            DesenhoEstadoTuringMulti d = new DesenhoEstadoTuringMulti(e,this, nFitas);
            d.setLocation(e.getXCentral()-30, e.getYCentral()-30);
            if(e.isInicial())
                estadoInicial = d;
            jPanel1.add(d);
        }


         ((Visualizacao)jPanel1).setEstados(estados);     
        
    
    }
    
    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        // TODO add your handling code here:
        Salvar s = new Salvar(estados);
        SalvarTuringMulti sXML;
        
        int result = salvarAutomato.showSaveDialog(this);
        if (result == salvarAutomato.APPROVE_OPTION) {
            
            File file = salvarAutomato.getSelectedFile();
            String f = file.getPath();
            
            if (!f.endsWith(".jff"))    
                f += ".jff"; 
            sXML = new SalvarTuringMulti(estados, f, nFitas);
                       
        }
    }//GEN-LAST:event_salvarActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if(simboloComboBox1.getSelectedIndex() != -1){
            Object[] retorno = transicaoTuring(String.valueOf(simboloComboBox1.getSelectedItem()));                
               
            if( (int)retorno[0] == 0 )                
                   editarTransicao((PainelFitas)retorno[1]); 
            
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    
    public Object[] transicaoTuring (String transicao){
        Object[] retorno = new Object[2]; 
        PainelFitas p = new PainelFitas(nFitas);       
        
        
        int aux = 0;
        for(int i = 0; i < p.nFitas; i++){
             p.getFita().get(i).getLido().setText(transicao.substring(aux, aux+1));
             p.getFita().get(i).getEscrito().setText(transicao.substring(aux+4, aux+5));
             
             
             switch(transicao.substring(aux+8, aux+9)){
                 
                case "R":   p.getFita().get(i).getDirecao().setSelectedIndex(0);
                            break;
                case "S":   p.getFita().get(i).getDirecao().setSelectedIndex(1);
                            break;
                case "L":   p.getFita().get(i).getDirecao().setSelectedIndex(2);
                            break;
                default:
                            break;
                
             }            
             
             aux += 12;
        
        }
        int i = JOptionPane.showConfirmDialog(editarTransicoes,
        p,"Editar Transição", JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null);
        
        retorno[0] = i;
        retorno[1] = p;
        
        return retorno;
    } 
    
    private void editarTransicao(PainelFitas fitasTransicao){
           
        Transicao transicao = null;
        
        for ( Transicao t : estadoSelecionado.getEstado().getTransicoes() ) {
                if ( t.getEstadoDestino().getNome().equals(estadoDestinoComboBox1.getSelectedItem().toString())  ) {                    
                    transicao = t;
                    break;
                }
            }
        
        transicao.getSimbolo().remove(simboloComboBox1.getSelectedItem().toString());
        
        int i = 0;        
        String editar = "";
        
        for(; i < nFitas - 1; i++){
            
            if( fitasTransicao.getFita().get(i).getLido().getText().equals("") )
                 editar += "□";
            else 
                editar += fitasTransicao.getFita().get(i).getLido().getText();
            
            editar += " ; ";
            
            if( fitasTransicao.getFita().get(i).getEscrito().getText().equals("") )
                editar += "□";
            else 
                editar += fitasTransicao.getFita().get(i).getEscrito().getText();
            
             editar += " , ";
             
             switch(String.valueOf(fitasTransicao.getFita().get(i).getDirecao().getSelectedItem()) ){
                 
                case "R":   editar += "R | ";
                            break;
                case "S":   editar += "S | ";
                            break;
                case "L":   editar += "L | ";
                            break;
                default:
                            break;
                
             }  
             
        }
        
        if( fitasTransicao.getFita().get(i).getLido().getText().equals("") )
            editar += "□";
        else 
            editar += fitasTransicao.getFita().get(i).getLido().getText();

        editar += " ; ";

        if( fitasTransicao.getFita().get(i).getEscrito().getText().equals("") )
            editar += "□";
        else 
            editar += fitasTransicao.getFita().get(i).getEscrito().getText();

         editar += " , ";

        switch(String.valueOf(fitasTransicao.getFita().get(i).getDirecao().getSelectedItem()) ){

           case "R":   editar += "R";
                       break;
           case "S":   editar += "S";
                       break;
           case "L":   editar += "L";
                       break;
           default:
                       break;

        }  
       
        transicao.getSimbolo().add(editar);

        atualizaComboBox(estadoDestinoComboBox1, simboloComboBox1);
        jPanel1.repaint();

    }   
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        this.setEnabled(true);
        editarTransicoes.dispose();
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        simboloComboBox1.setModel( modelo );
    }//GEN-LAST:event_jButton6ActionPerformed

    private void estadoDestinoComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadoDestinoComboBox1ItemStateChanged
        // TODO add your handling code here:
        atualizaComboBox(estadoDestinoComboBox1, simboloComboBox1);
    }//GEN-LAST:event_estadoDestinoComboBox1ItemStateChanged

    private void menu_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_editarActionPerformed
        // TODO add your handling code here:
        editarTransicoes.setVisible(true);
        editarTransicoes.setLocationRelativeTo(null);
        this.setEnabled(false);
        
        estadoSelecionadoLabel1.setText(estadoSelecionado.getEstado().getNome());
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        
        for ( Transicao e : estadoSelecionado.getEstado().getTransicoes() )                     
             modelo.addElement( e.getEstadoDestino().getNome() );

        estadoDestinoComboBox1.setModel( modelo );
        estadoDestinoComboBox1.setSelectedIndex(-1);
    }//GEN-LAST:event_menu_editarActionPerformed
          
    private void removerTransicoes (Estado remover, ArrayList<Estado> conversao){
        Transicao t = null;
        for(Estado e : conversao){
            if(!e.getNome().equals(remover.getNome())){
                t = retornaTransicao(e,remover);
                e.getTransicoes().remove(t);
            }     
        }
    }
    
    private Transicao retornaTransicao (Estado inicial, Estado destino){
        Transicao t = null;
        
        for(Transicao  tt : inicial.getTransicoes()) 
            if(tt.getEstadoDestino().getNome().equals(destino.getNome()))
                 return tt;        
        
        return t;
    }
    
    public boolean verificaTransicao (int i, String a,int j){
        
        for(Transicao t : estados.get(i).getTransicoes())
            for(String s : t.getSimbolo())
                if(s.equals(a) && t.getEstadoDestino().getNome().equals(estados.get(j).getNome()))
                    return true;
        
        return false;
    }
    
    public static void limparTabela(JTable table) {
        for (int i = 0; i < table.getRowCount(); i++)
           for(int j = 0; j < table.getColumnCount(); j++) 
               table.setValueAt("", i, j);      
     }
           
    private boolean verificarEntrada(String[] entrada) {                                         
        
        String transicao="";
        iniciaFita(fita, entrada);        
        int limite = 100;
        Estado estadoAtual = estadoInicial.getEstado();
        int verifica = 0, j = 0, aux = 0, aux2 = 0;       
        int[] movimentoFita = new int[nFitas];
        
        for(int i = 0; i < nFitas ;i++)
            movimentoFita[i] = 4999;
        
        while(!estadoAtual.isFinal() && j < limite){ 
            for(Transicao t : estadoAtual.getTransicoes())               
                for(String s : t.getSimbolo()){                    
                    for(int k = 0; k < nFitas; k++){
                       if(fita[k][movimentoFita[k]].equals(s.substring(aux, aux+1)))
                            aux2 += 1;                                         
                       aux += 12;                           
                      }
                   
                    if(aux2 == nFitas){                           
                        estadoAtual = t.getEstadoDestino();
                        transicao = s;
                        verifica++;
                        aux2 = aux = 0;
                        break;
                    }
                    aux2 = aux = 0;                     
                }              
        
        if(verifica == 0)
            return false;
        else { //movimenta a fita
            
            verifica = 0;
            j++;
            aux2 = aux = 0;            
             
            
            for(int k = 0; k < nFitas; k++){
                
                switch(transicao.substring(aux+8, aux+9)){
                        case "R":   fita[k][movimentoFita[k]] = transicao.substring(aux+4, aux+5);
                                    movimentoFita[k]++;                                 
                                    break;

                        case "S":   fita[k][movimentoFita[k]] = transicao.substring(aux+4, aux+5);                                   
                                    break;

                        case "L":   fita[k][movimentoFita[k]] = transicao.substring(aux+4, aux+5);
                                    movimentoFita[k]--;                                
                                    break;
                }
                aux += 12;
                
            }             
            
        }
        aux = 0;
         if (estadoAtual.isFinal())
           return true;      
        }
        if(j == 100)
            return false;
        else return true;
        
    } 
    
    private void iniciaFita(String[][] fita, String[] entrada){      
        
        for(int i = 0; i < nFitas; i++)
            for(int j = 0; j < fita[nFitas-1].length; j++)
                fita[i][j] = "□"; 
       
        for(int i = 0; i < entrada.length; i++)
           for(int j = 0; j < entrada[i].length(); j++)
               fita[i][4999+j] = String.valueOf(entrada[i].charAt(j));        
       
           
    }   
        
    private void atualizaComboBox(JComboBox combo1, JComboBox combo2){
          Transicao tt = null;

            for(Transicao tr :  estadoSelecionado.getEstado().getTransicoes()) { 
               if(tr.getEstadoDestino().getNome().equals((String)combo1.getSelectedItem())){
                    tt = tr;
                    break;
               }
            }
        
            if(tt != null){
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();

                for ( String s : tt.getSimbolo() )
                    modelo.addElement( s );
                  
                 
                  combo2.setModel(modelo);
                  
                  int larguraLista = 180;
                  int aux = nFitas;
                  
                  switch(aux){
                      case 3: larguraLista = 265;
                              break;
                      case 4: larguraLista = 355;
                              break;
                      case 5: larguraLista = 445;
                              break;
                      default: 
                              break;
                  }
                  
                  ((JComboBoxWider)combo2).setListWidth(larguraLista);
             }
    
    }
    
    private boolean verificaTransicaoFinal(){
        //Método que verifica se há transições de estados finais
        
        for(Estado e : estados)
            if(!e.getTransicoes().isEmpty() && e.isFinal())
                return false;       
        
        return true;
    }
    
    private String[] entradasDialogo(int nFitas, int opcao){
        String[] entradas = new String[nFitas];        
        int aux = nFitas - 2; 
        
        JTextField j = new JTextField();
        j.setBorder(BorderFactory.createLineBorder(Color.black));      
        j.setFont(new Font("Tahoma", Font.PLAIN, 15));

        JTextField j2 = new JTextField();
        j2.setBorder(BorderFactory.createLineBorder(Color.black));      
        j2.setFont(new Font("Tahoma", Font.PLAIN, 15));
        
        JTextField j3 = new JTextField();
        j3.setBorder(BorderFactory.createLineBorder(Color.black));      
        j3.setFont(new Font("Tahoma", Font.PLAIN, 15));
        
        JTextField j4 = new JTextField();
        j4.setBorder(BorderFactory.createLineBorder(Color.black));      
        j4.setFont(new Font("Tahoma", Font.PLAIN, 15));
        
        JTextField j5 = new JTextField();
        j5.setBorder(BorderFactory.createLineBorder(Color.black));      
        j5.setFont(new Font("Tahoma", Font.PLAIN, 15));
        
        Object[] message = {
                                "Entrada 1:", j,  "Entrada 2:", j2                
        };
           
        String mensagem = "";
        
       
        if(opcao == 0)
            mensagem = "Entrada Única";
        else
            mensagem = "Passo a passo";
        
        switch(aux){
            case 0: int i = JOptionPane.showConfirmDialog(this,
                    message, mensagem, JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null);
                    
                    if(i==0)
                        if(j.getText() != null || j2.getText() != null){
                               entradas[0] = j.getText();
                               entradas[1] = j2.getText();
                        }
                    break;
                    
            case 1: Object[] message2 = {
                                "Entrada 1:", j,  "Entrada 2:", j2, "Entrada 3:", j3              
                    };
                
                    i = JOptionPane.showConfirmDialog(this,
                    message2,mensagem, JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null);
                    
                    if(i==0)
                        if(j.getText() != null || j2.getText() != null || j3.getText() != null){
                               entradas[0] = j.getText();
                               entradas[1] = j2.getText();
                               entradas[2] = j3.getText();
                        }
                    break;
            case 2: Object[] message3 = {
                                "Entrada 1:", j,  "Entrada 2:", j2, "Entrada 3:", j3, "Entrada 4:", j4               
                    };
                
                    i = JOptionPane.showConfirmDialog(this,
                    message3,mensagem, JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null);
                    
                    if(i==0)
                        if(j.getText() != null || j2.getText() != null || j3.getText() != null || j4.getText() != null){
                               entradas[0] = j.getText();
                               entradas[1] = j2.getText();
                               entradas[2] = j3.getText();
                               entradas[3] = j4.getText();
                        }
                    break;
            case 3: Object[] message4 = {
                                "Entrada 1:", j,  "Entrada 2:", j2, "Entrada 3:", j3, "Entrada 4:", j4     , "Entrada 5:", j5           
                    };
                
                    i = JOptionPane.showConfirmDialog(this,
                    message4,mensagem, JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null);
                    
                    if(i==0)
                        if(j.getText() != null || j2.getText() != null || j3.getText() != null || j4.getText() != null || j5.getText() != null ){
                               entradas[0] = j.getText();
                               entradas[1] = j2.getText();
                               entradas[2] = j3.getText();
                               entradas[3] = j4.getText();
                               entradas[4] = j5.getText();
                        }
                    break;           
            default: 
                    break;
         
        }
        
        
        return entradas; 
    }
    
    private DefaultTableModel criaModeloTabela(int nFitas){
       
        DefaultTableModel modelo = null;
        
        switch(nFitas){            
            
            case 2:     modelo = (new DefaultTableModel(
                        new Object [][] {
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null}
                        },
                        new String [] {
                            "Entrada 1", "Entrada 2", "Resultado"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                            true, true, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                        
                        });
            
                        break;
                        
                        
             case 3:     modelo = (new DefaultTableModel(
                        new Object [][] {
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null}
                        },
                        new String [] {
                            "Entrada 1", "Entrada 2", "Entrada 3", "Resultado"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                            true, true, true, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                        
                        });
            
                        break;
             case 4:     modelo = (new DefaultTableModel(
                        new Object [][] {
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null}
                        },
                        new String [] {
                            "Entrada 1", "Entrada 2", "Entrada 3", "Entrada 4", "Resultado"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                            true, true, true, true, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                        
                        });
            
                        break;
             case 5:     modelo = (new DefaultTableModel(
                        new Object [][] {
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null},
                            {null, null, null, null, null}
                        },
                        new String [] {
                            "Entrada 1", "Entrada 2", "Entrada 3", "Entrada 4", "Entrada 5", "Resultado"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                            true, true, true, true, true, false
                        };

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                        
                        });
            
                        break;
        }
        
        return modelo;
    }
    /**
     * @param args the command line arguments
     */
    
   
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JDialog ExcluirTransicoes;
    private javax.swing.JMenuItem Novo;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JFileChooser abrirAutomato;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JToggleButton editar;
    public javax.swing.JDialog editarTransicoes;
    private javax.swing.JTabbedPane editor;
    public javax.swing.JComboBox<String> estadoDestinoComboBox;
    public javax.swing.JComboBox<String> estadoDestinoComboBox1;
    public javax.swing.JLabel estadoSelecionadoLabel;
    public javax.swing.JLabel estadoSelecionadoLabel1;
    private javax.swing.JToggleButton estado_botao;
    public javax.swing.JToggleButton excluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public javax.swing.JMenuItem menu_alterar_nome;
    public javax.swing.JMenuItem menu_editar;
    public javax.swing.JCheckBoxMenuItem menu_final;
    public javax.swing.JCheckBoxMenuItem menu_inicial;
    private javax.swing.JMenuItem multiplas;
    private javax.swing.JDialog multiplasEntradas;
    private javax.swing.JMenuItem passo;
    public javax.swing.JPopupMenu popup_menu;
    private javax.swing.JMenuItem salvar;
    private javax.swing.JFileChooser salvarAutomato;
    private javax.swing.JFileChooser salvarImagem;
    private javax.swing.JMenuItem salvar_imagem;
    public javax.swing.JComboBox<String> simboloComboBox;
    public javax.swing.JComboBox<String> simboloComboBox1;
    public javax.swing.JToggleButton transicao;
    private javax.swing.JMenuItem unica;
    // End of variables declaration//GEN-END:variables
}
