/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pdi;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JFileChooser;
import java.io.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author Vinicius
 */
public class NewJFrame extends javax.swing.JFrame {
    Funcoes imagem = new Funcoes();
    String nome,nome2,nome3;
    int op1 = -1;
    File file, file2, file3;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        SalvaPGM = new javax.swing.JFileChooser();
        SalvaPPM = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jFileChooser1.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filterpgm = new FileNameExtensionFilter("Imagem em tons de cinza (PGM)", "pgm");
        jFileChooser1.addChoosableFileFilter(filterpgm);

        jFileChooser2.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filterppm = new FileNameExtensionFilter("Imagem colorida (PPM)", "ppm");
        jFileChooser2.addChoosableFileFilter(filterppm);

        SalvaPGM.setAcceptAllFileFilterUsed(false);
        SalvaPGM.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        SalvaPGM.setApproveButtonText("Salvar");
        FileNameExtensionFilter fpgm = new FileNameExtensionFilter("Imagem em tons de cinza (PGM)", "pgm");
        SalvaPGM.addChoosableFileFilter(fpgm);

        SalvaPPM.setAcceptAllFileFilterUsed(false);
        SalvaPPM.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        SalvaPPM.setApproveButtonText("Salvar");
        FileNameExtensionFilter fppm = new FileNameExtensionFilter("Imagem colorida (PPM)", "ppm");
        SalvaPPM.addChoosableFileFilter(fppm);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Processamento Digital de Imagens");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 20)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Descrição do processamento");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Processar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Processamentos PGM:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Processamentos PPM:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Escolha um processamento)", "Alongamento de Contraste ", "Binarização", "CMYK", "Destaca em 2 cores", "Gamma", "Gera Colorida ", "HSI" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Escolha um processamento)", "Mais azul", "Menos vermelho", "RGB para PGM", "Um canal" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Imagens em tons de cinza");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Imagens coloridas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(44, 44, 44)
                                        .addComponent(jButton2))
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)))
                        .addGap(248, 248, 248))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jComboBox1.addItemListener(
            new ItemListener(){
                public void itemStateChanged(ItemEvent event){
                    if(event.getStateChange() == ItemEvent.SELECTED)
                    op1 = jComboBox1.getSelectedIndex();

                    switch (op1){
                        case 0: jTextArea1.setText("Alongamento de contraste\n\n");
                        jTextArea1.append("    Pode ser chamado também de normalização ou alongamento de\nhistograma.");
                        jTextArea1.append("\n    Toda imagem tem um histograma que é um gráfico onde o eixo x\nsão os tons de cinza, 0 a 255, da imagem e o eixo y é a quantidade\nde pixels de cada tom de cinza da imagem.");
                        jTextArea1.append(" Há imagens em que a\nquantidade de pixels de tons de cinza estão concentrados em alguma\nparte do histograma, fazendo com que a imagem fique muito escura\nou muito clara.");
                        jTextArea1.append("\n    O alongamento de contraste distribui a quantidade de pixels\nde tons de cinza por todo o histograma, em imagens em que eles \nestão concentrados, fazendo com que a imagem fique com um contraste\nequilibrado, nem muito escuro nem muito claro.");
                        jTextArea1.append(" Imagens com contraste\nequilibrado, quantidade de pixels de tons de cinza distribuidos\npor todo o histograma, após o processamento não há alteração.");
                        jTextArea1.setCaretPosition(0);
                        op1=30;
                        break;
                        case 1: jTextArea1.setText("Binarização\n\n");
                        jTextArea1.append("    Após abrir uma imagem PGM(imagem em tons de cinza), o usuário\nescolhe um valor entre 0 a 255 (tons de cinza da imagem).");
                        jTextArea1.append(" Valores\nde tons de cinza ,da imagem, acima do escolhido ficam brancos e\nvalores abaixo do escolhido ficam pretos.");
                        jTextArea1.append(" Ou Seja, a imagem fica\ncom duas cores preto e branco, binarizada.");
                        op1=31;
                        break;
                        case 2: jTextArea1.setText("CMYK\n\n");
                        jTextArea1.append("    CMYK é a abreviatura do sistema de cores formado por Ciano\n(Cyan), Magenta (Magenta), Amarelo (Yellow) e Preto (Black (Key)).\n");
                        jTextArea1.append("    O CMYK funciona devido à absorção de luz, pelo fato de que as\ncores que são vistas vêm da parte da luz que não é absorvida. Este\nsistema é empregado por imprensas, impressoras e fotocopiadoras\npara reproduzir a maioria das cores do espectro visível, e é conhecido\ncomo quadricromia. É o sistema subtrativo de cores, em contraposição\nao sistema aditivo, o RGB.\n");
                        jTextArea1.append("    Ciano é a cor oposta ao vermelho, o que significa que atua\ncomo um filtro que absorve a dita cor (-R +G +B). Da mesma forma,\nmagenta é a oposta ao verde (+R -G +B) e amarelo é a oposta ao\nazul (+R +G -B). Assim, magenta mais amarelo produzirá vermelho,\nmagenta mais ciano produzirá azul e ciano mais amarelo produzirá\nverde.\n");
                        jTextArea1.append("    Após utilizar o processamento RGB para PGM, que a partir de\numa imagem colorida extrai seus canais R(Vermelho), G(Verde) e\nB(Azul) para imagens em tons de cinza, o usuário abre os 3 canais(RGB)\nconvertidos em tons de cinza e processa esses canais.");
                        jTextArea1.append(" O processamento\nconsiste em fazer C = 255 - R, M = 255 - G e Y = 255 - B (255 menos\no valor do pixel da imagem no R,G ou B) para formar o C, M e Y.");
                        jTextArea1.setCaretPosition(0);
                        op1=35;
                        break;
                        case 3: jTextArea1.setText("Destaca em 2 cores\n\n");
                        jTextArea1.append("    A partir de uma imagem em tons de cinza é possível para o usuário\ndestacar alguma região dela de seu interesse. Observando o histograma\nda imagem(ver definção de histograma no alongamento de contraste)\no usuário observa os tons de cinza que quer destacar. Exemplo: se\nele quer destacar os tons de cinza acima de 123 então o processamento\ncoloca todos os tons de cinza acima de 123 em amarelo e abaixo\nem azul e salva em uma nova imagem colorida. Assim a imagem fica\ncom a região escolhida destacada em amarelo e o restante em azul.");
                        jTextArea1.setCaretPosition(0);
                        op1=32;
                        break;
                        case 4: jTextArea1.setText("Gamma\n\n");
                        jTextArea1.append("    A correção gamma, gamma não-linearidade, compressão de gamma,\nou muitas vezes simplesmente gamma, é o nome de uma operação não-linear\nusada para decodificar e codificar luminância ou valores tristimulares\nem sistemas de vídeo ou imagem fixa. Correção de Gamma é, nos casos\nmais simples, definida pela seguinte expressão: Vout = AVin^y onde A\né uma constante e a valores de entrada e de saída são valores reais\nnão-negativos; no caso comum de A = 1, as entradas e saídas estão\ntipicamente na faixa de 0-1.");
                        jTextArea1.append("\n    O processamento pega o valor de cada pixel e aplica a equação\nde correcão gamma. Para valores de y, gamma, maiores que 1 a imagem\nfica mais escura, e para valores menores que 1 a imagem fica mais\nclara. Isso acontece porque a função de correção gamma é uma função\nexponecial então, para gamma > 1 os valores de tons de cinza altos\nficam com valores menores, imagem escura; e para gamma < 1 valores\nde tons de cinza baixos ficam com valores maiores, imagem clara.");
                        jTextArea1.setCaretPosition(0);
                        op1=33;
                        break;
                        case 5: jTextArea1.setText("Gera colorida\n\n");
                        jTextArea1.append("    Faz o processamento inverso do RGB para PGM. Após o usuário\nutilizar o processamento RGB para PGM, que extrai os canais R(Vermelho),\nG(Verde) e B(Azul) de uma imagem colorida para 3 imagens separadas\nem tons de cinza, é possível voltar a imagem para colorido a partir\ndos 3 canais(RGB).\n");
                        jTextArea1.append("    Em uma imagem colorida cada pixel é formado por 3 valores,\ncanais (R, G e B). O processamento junta os 3 canais (RGB), em\ntons de cinza, para imagem ficar colorida. Isso é feito da seguinte\nmaneira: o processamento pega o valor de cada pixel de cada canal\n(R, G e B) e junta para ficar um pixel com 3 valores, assim forma\numa imagem colorida.");
                        jTextArea1.setCaretPosition(0);
                        op1=34;
                        break;

                        case 6: jTextArea1.setText("HSI\n\n");
                        jTextArea1.append("    O modelo de cor HSI codifica as cores de acordo com sua matiz,\nsaturação e intensidade. O modelo HSI é usado por alguns programas\ngráficos e monitores de cor como uma alternativa para, ou ao lado\nda representação RGB. No sistema HSI, a tonalidade de uma cor é a\nsua medida do ângulo em uma roda de cores. Tons vermelhos puros são\n0°, tons de verde puros são de 120°, e os azuis puros são de 240°.\n(As cores neutras - branco, cinza e preto - são definidos para 0°\npor conveniência.) A intensidade é a leveza geral ou o brilho da\ncor, definida numericamente como a média dos valores RGB equivalentes.\nA definição HSI de saturação é uma medida de uma pureza de cor /\nacinzentado. Cores mais puras têm um valor de saturação mais próximo\nde 1, enquanto que as cores mais cinzentas têm um valor de saturação\nmais próximo a 0.");
                        jTextArea1.append("\n    O que o processamento faz é converter 3 imagens em tons de cinza\n(R, G e B) para o sistema HSI aplicando a cada pixel uma equação para\nH, outra para S e outra para I.");
                        jTextArea1.setCaretPosition(0);
                        op1=36;
                        break;
                    }
                    jComboBox1.removeItem("(Escolha um processamento)");
                }
            }
        );
        jComboBox2.addItemListener(
            new ItemListener(){
                public void itemStateChanged(ItemEvent event){
                    if(event.getStateChange() == ItemEvent.SELECTED)
                    op1 = jComboBox2.getSelectedIndex();
                    switch (op1){
                        case 0: jTextArea1.setText("Mais azul\n\n");
                        jTextArea1.append("    Aumenta a intensidade do canal B(Azul) na imagem, resulta\nem uma imagem mais \"azulada\". O usuário digita um valor entre\n0 a 255 e esse valor é somado à todos os pixels da imagem no\ncanal B, os canais R e G permanecem inalterados. Com isso há um\naumento na intensidade de azul na imagem.");
                        op1=40;
                        break;
                        case 1: jTextArea1.setText("Menos vermelho\n\n");
                        jTextArea1.append("    Diminui a intensidade do canal R(Vermelho) na imagem, resulta\nem uma imagem menos \"avermelhada\". O usuário digita um valor entre\n0 a 255 e esse valor é subtraido de todos os pixels da imagem no\ncanal R, os canais G e B permanecem inalterados. Com isso há uma\nredução de intensidade de vermelho na imagem.");
                        op1=37;
                        break;
                        case 2: jTextArea1.setText("RGB para PGM\n\n");
                        jTextArea1.append("    A partir de uma imagem colorida extrai seus 3 canais R(Vermelho),\nG(Verde) e B(Azul) para imagens em tons de cinza. Em uma imagem\ncolorida cada pixel é formado por 3 valores (R, G e B). O processamento\npega cada pixel da imagem e extrai um dos seus 3 valores R, G ou B\ne vai salvando em uma imagem separada. Isso é feito com os 3 canais\ne logo após terminar, os 3 canais estarão salvos em 3 imagens\ndiferentes de tons de cinza.");
                        jTextArea1.setCaretPosition(0);
                        op1=38;
                        break;
                        case 3: jTextArea1.setText("Um canal\n\n");
                        jTextArea1.append("    Esse processamento consiste em a partir de uma imagem colorida\nextrair seus canais R(Vermelho), G(Verde) e B(Azul) e salvá-los\nseparadamente.\n");
                        jTextArea1.append("    Em uma imagem colorida cada pixel é formado por 3 valores(R, G e B).\nO processamento para extrair os canais ele pega os valores do pixel\ne um deles é mantido(R, G ou B) e os outros dois são zerados, isso\né feito com os 3 canais. O processamento faz esse procedimento\ncom todos os pixels extraindo assim os canais R, G e B de uma\nimagem colorida.");
                        jTextArea1.setCaretPosition(0);
                        op1=39;
                        break;
                    }
                    jComboBox2.removeItem("(Escolha um processamento)");
                }
            }
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (op1 == -1)
            JOptionPane.showMessageDialog(null,"Escolha um processamento", "Aviso", JOptionPane.WARNING_MESSAGE);
        else{
            if ((op1 >= 30 && op1 <= 34) || op1 == 35 || op1 == 36)
                 AbrePGM();
            else AbrePPM();  
        }
          
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(file==null && op1!=34 && op1 != 35 && op1 !=36)
           JOptionPane.showMessageDialog(null,"Nenhuma imagem foi aberta!", "Aviso", JOptionPane.WARNING_MESSAGE);
        else{
             switch(op1){
                case 30: {
                         try {
                              if(imagem.alongContraste(nome)==1)
                                 Salva_PGM(); 
                         } catch (IOException ex) {
                               Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                          }
                         }                                
                          break;
                    
                case 31: {
                         try { //verifica arquivo
                             int valor; String a;
                              a = JOptionPane.showInputDialog("Insira um valor entre 0 a 255:\n\n(OBS. Valores abaixo de 0 serão convertidos para 0 e\nvalores maiores que 255 serão convertidos para 255)");
                              if (a != null){ 
                                 try{ // verifica se foi digitado numero
                                     valor = Integer.parseInt(a);
                                     if(valor > 255)
                                        valor = 255;
                                     else if (valor < 0)
                                        valor = 0;
                                     
                                        if(imagem.binarizacao(nome,valor)==1)
                                            Salva_PGM();                                                                                
                                                                                
                                     }
                                  catch (NumberFormatException e){  
                                         JOptionPane.showMessageDialog(null,"Não foi inserido somente números","Aviso",JOptionPane.WARNING_MESSAGE);   
                                  } 
                              } //if
                         } catch (IOException ex) {
                               Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                             }
                         } 
                         break;
                    
                case 32: try { //verifica arquivo
                             int valor; String a;
                              a = JOptionPane.showInputDialog("Insira um valor entre 0 a 255:\n\n(OBS. Valores abaixo de 0 serão convertidos para 0 e\nvalores maiores que 255 serão convertidos para 255)");
                              if (a != null){ 
                                 try{ // verifica se foi digitado numero
                                     valor = Integer.parseInt(a);
                                     if(valor > 255)
                                        valor = 255;
                                     else if (valor < 0)
                                        valor = 0;
                                     
                                        if(imagem.destaca2(nome,valor)==1)
                                            Salva_PPM();                                                                                
                                                                                
                                     }
                                  catch (NumberFormatException e){  
                                         JOptionPane.showMessageDialog(null,"Não foi inserido somente números","Aviso",JOptionPane.WARNING_MESSAGE);   
                                  } 
                              } //if
                         } catch (IOException ex) {
                               Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                             }
                         
                         break;
                    
                case 33: {
                         try { //verifica arquivo
                             double valor; String a;
                              a = JOptionPane.showInputDialog("Insira um valor positivo para o gamma:");
                              if (a != null){ 
                                 try{ // verifica se foi digitado numero
                                     valor = Double.parseDouble(a);
                                     if (valor < 0)
                                        JOptionPane.showMessageDialog(null,"O número inserido não é positivo!","Aviso",JOptionPane.WARNING_MESSAGE);
                                     else{
                                         if(imagem.Gamma(nome,valor)==1)
                                            Salva_PGM();                                                                                
                                     }                                       
                                    }
                                  catch (NumberFormatException e){  
                                         JOptionPane.showMessageDialog(null,"Não foi inserido somente números","Aviso",JOptionPane.WARNING_MESSAGE);   
                                  } 
                              } //if
                         } catch (IOException ex) {
                               Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                             }
                         } 
                        break;
                    
                case 34: if (file!=null && file2!=null && file3!=null){
                            try {
                                if(imagem.geraColorida(nome2,nome3,nome)==1)
                                    Salva_PPM();
                            } catch (IOException ex) {
                                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            }
                         else JOptionPane.showMessageDialog(null,"Não forão abertas 3 imagens PGM!", "Aviso", JOptionPane.WARNING_MESSAGE);
                         break;
                    
                 case 35: if (file!=null && file2!=null && file3!=null){
                            try {
                                imagem.CMY(nome2, nome3, nome);
                            } catch (IOException ex) {
                                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            }
                           else JOptionPane.showMessageDialog(null,"Não forão abertas 3 imagens PGM!", "Aviso", JOptionPane.WARNING_MESSAGE);
                           break;
                
                 case 36: if (file!=null && file2!=null && file3!=null){
                            try {
                                imagem.HSI(nome2, nome3, nome);
                            } catch (IOException ex) {
                                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            }
                         else JOptionPane.showMessageDialog(null,"Não forão abertas 3 imagens PGM!", "Aviso", JOptionPane.WARNING_MESSAGE);
                         break;
                     
                case 37: {
                         try { //verifica arquivo
                             int valor; String a;
                              a = JOptionPane.showInputDialog("Insira um valor entre 0 a 255:\n\n(OBS. Valores abaixo de 0 serão convertidos para 0 e\nvalores maiores que 255 serão convertidos para 255)");
                              if (a != null){ 
                                 try{ // verifica se foi digitado numero
                                     valor = Integer.parseInt(a);
                                     if(valor > 255)
                                        valor = 255;
                                     else if (valor < 0)
                                        valor = 0;
                                     
                                        if(imagem.menosVer(nome,valor)==1)
                                            Salva_PPM();                                                                                
                                                                                
                                     }
                                  catch (NumberFormatException e){  
                                         JOptionPane.showMessageDialog(null,"Não foi inserido somente números","Aviso",JOptionPane.WARNING_MESSAGE);   
                                  } 
                              } //if
                         } catch (IOException ex) {
                               Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                             }
                         } 
                         break;
                case 38: {
                         try {
                              imagem.RGBtoPGM(nome);
                         } catch (IOException ex) {
                              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                         }
                         }
                         break;
                case 39: {
                         try {
                              imagem.umCanal(nome);
                         } catch (IOException ex) {
                              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                         }
                         }
                         break;
                    
               case 40: {
                         try { //verifica arquivo
                             int valor; String a;
                              a = JOptionPane.showInputDialog("Insira um valor entre 0 a 255:\n\n(OBS. Valores abaixo de 0 serão convertidos para 0 e\nvalores maiores que 255 serão convertidos para 255)");
                              if (a != null){ 
                                 try{ // verifica se foi digitado numero
                                     valor = Integer.parseInt(a);
                                     if(valor > 255)
                                        valor = 255;
                                     else if (valor < 0)
                                        valor = 0;
                                     
                                        if(imagem.maisAzul(nome,valor)==1)
                                            Salva_PPM();                                                                                
                                                                                
                                     }
                                  catch (NumberFormatException e){  
                                         JOptionPane.showMessageDialog(null,"Não foi inserido somente números","Aviso",JOptionPane.WARNING_MESSAGE);   
                                  } 
                              } //if
                         } catch (IOException ex) {
                               Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                             }
                         } 
                         break; 
            }//switch
        }// else
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
          java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JFileChooser SalvaPGM;
    protected javax.swing.JFileChooser SalvaPPM;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void Salva_PGM() throws IOException {
        File fileS = null; String nomes; int returnVal;
        returnVal = SalvaPGM.showSaveDialog(this);  
                                        
          if (returnVal == JFileChooser.APPROVE_OPTION){
                 fileS = SalvaPGM.getSelectedFile();
                 nomes = fileS.getAbsolutePath();
                                        
                 imagem.escreve(nomes + ".pgm");
                 JOptionPane.showMessageDialog(null,"Processamento concluído!", "Processmanto", JOptionPane.PLAIN_MESSAGE);
               } //To change body of generated methods, choose Tools | Templates.
    }    
    private void Salva_PPM() throws IOException{
        File fileS = null; String nomes; int returnVal;
        returnVal = SalvaPPM.showSaveDialog(this);  
                                        
        if (returnVal == JFileChooser.APPROVE_OPTION){
                 fileS = SalvaPPM.getSelectedFile();
                 nomes = fileS.getAbsolutePath();
                                        
                 imagem.escreve(nomes + ".ppm");
                 JOptionPane.showMessageDialog(null,"Processamento concluído!", "Processmanto", JOptionPane.PLAIN_MESSAGE);
               } //To change body of generated methods, choose Tools | Templates.
    } 
    private void AbrePGM() {                                         
        // TODO add your handling code here:   
       int returnVal;
                   
       if(op1>=34 &&op1 <=36){
           returnVal = jFileChooser1.showOpenDialog(this);        
           if (returnVal == JFileChooser.APPROVE_OPTION){
           file2 = jFileChooser1.getSelectedFile();
           nome2 = file2.getAbsolutePath();
           
           }
           returnVal = jFileChooser1.showOpenDialog(this); 
           if (returnVal == JFileChooser.APPROVE_OPTION){
           file3 = jFileChooser1.getSelectedFile();
           nome3 = file3.getAbsolutePath();
          
           }
       }
       returnVal = jFileChooser1.showOpenDialog(this); 
       if (returnVal == JFileChooser.APPROVE_OPTION){
          file = jFileChooser1.getSelectedFile();
          nome = file.getAbsolutePath();
          
       }
    }
    private void AbrePPM(){
      int returnVal;
     
       returnVal = jFileChooser2.showOpenDialog(this); 
       if (returnVal == JFileChooser.APPROVE_OPTION){
          file = jFileChooser2.getSelectedFile();
          nome = file.getAbsolutePath();
          
       }
    }
}
