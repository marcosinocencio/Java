/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import processamento.Processamento;

/**
 *
 * @author Vinicius
 */
public class Interface extends javax.swing.JFrame {    
    private final Quadro[] quadros = new Quadro[6];    
    private Processamento imagem;
    private String nomeImagem = "";
    private int quadroClicado = 0;
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();    
        canais.setEnabled(false);
        detectarBordas.setEnabled(false);        
        openCV.setEnabled(false);
        imagens.setEnabled(false);        
        canal1.setEnabled(false);
        canal3.setEnabled(false);
        canal2.setEnabled(false);
        equalizar.setEnabled(false);
        aQuantitativa.setEnabled(false);
        quadros[0] = new Quadro(null,"",quadro1);
        quadros[1] = new Quadro(null,"",quadro2);
        quadros[2] = new Quadro(null,"",quadro3);
        quadros[3] = new Quadro(null,"",imagemOQuadro);
        quadros[4] = new Quadro(null,"",resultadoQuadro);
        quadros[5] = new Quadro(null,"",openCVQuadro);    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        abrirImagem = new javax.swing.JFileChooser();
        menuImagem = new javax.swing.JPopupMenu();
        salvar = new javax.swing.JMenuItem();
        tamanhoOriginal = new javax.swing.JMenuItem();
        limpar = new javax.swing.JMenuItem();
        salvarImagem = new javax.swing.JFileChooser();
        salvarAleatoriamente = new javax.swing.JFileChooser();
        openCVQuadro = new javax.swing.JLabel();
        resultadoQuadro = new javax.swing.JLabel();
        imagemOQuadro = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        quadro3 = new javax.swing.JLabel();
        quadro2 = new javax.swing.JLabel();
        quadro1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        canal1 = new javax.swing.JComboBox<>();
        canal3 = new javax.swing.JComboBox<>();
        canal2 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        abrir = new javax.swing.JMenu();
        menuAbrirImagem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        sair = new javax.swing.JMenuItem();
        canais = new javax.swing.JMenu();
        rgb = new javax.swing.JMenuItem();
        yiq = new javax.swing.JMenuItem();
        hsv = new javax.swing.JMenuItem();
        cmy = new javax.swing.JMenuItem();
        ycbcr = new javax.swing.JMenuItem();
        detectarBordas = new javax.swing.JMenu();
        pCanny = new javax.swing.JMenuItem();
        sobel = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        equalizar = new javax.swing.JMenu();
        aleatoria = new javax.swing.JMenuItem();
        eCanais = new javax.swing.JMenuItem();
        eHSV = new javax.swing.JMenuItem();
        eYIQ = new javax.swing.JMenuItem();
        imagens = new javax.swing.JMenu();
        diferenca = new javax.swing.JMenuItem();
        openCV = new javax.swing.JMenu();
        canny = new javax.swing.JMenuItem();
        equalizacao = new javax.swing.JMenuItem();
        otsuOpen = new javax.swing.JMenuItem();
        sobelOpen = new javax.swing.JMenuItem();
        aQuantitativa = new javax.swing.JMenu();
        qBorda = new javax.swing.JMenuItem();
        visual = new javax.swing.JMenuItem();

        abrirImagem.addChoosableFileFilter(new FileNameExtensionFilter("Imagens (*.jpg, *.bmp)",new String[]{"jpg","jpeg","bmp"}));
        abrirImagem.setAcceptAllFileFilterUsed(false);

        salvar.setText("Salvar Imagem");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        menuImagem.add(salvar);

        tamanhoOriginal.setText("Mostrar em Tamanho Original");
        tamanhoOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanhoOriginalActionPerformed(evt);
            }
        });
        menuImagem.add(tamanhoOriginal);

        limpar.setText("Limpar");
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });
        menuImagem.add(limpar);

        salvarImagem.setAcceptAllFileFilterUsed(false);
        salvarImagem.addChoosableFileFilter(new FileNameExtensionFilter("Imagem BMP","bmp"));
        salvarImagem.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        salvarAleatoriamente.setAcceptAllFileFilterUsed(false);
        salvarAleatoriamente.addChoosableFileFilter(new FileNameExtensionFilter("Imagem BMP","bmp"));
        salvarAleatoriamente.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Segmentador de Imagens Coloridas");

        openCVQuadro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        openCVQuadro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openCVQuadroMouseClicked(evt);
            }
        });

        resultadoQuadro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultadoQuadro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultadoQuadroMouseClicked(evt);
            }
        });

        imagemOQuadro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        imagemOQuadro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imagemOQuadroMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Canais", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        quadro3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        quadro3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quadro3MouseClicked(evt);
            }
        });

        quadro2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        quadro2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quadro2MouseClicked(evt);
            }
        });

        quadro1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        quadro1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quadro1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Canal 1:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Canal 2:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Canal 3:");

        canal1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        canal1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "R (RGB)", "G (RGB)", "B (RGB)", "Y (YIQ)", "I (YIQ)", "Q (YIQ)", "H (HSV)", "S (HSV)", "V (HSV)", "C (CMY)", "M (CMY)", "Y (CMY)", "Y (YCbCr)", "Cb (YCbCr)", "Cr (YCbCr)" }));
        canal1.setSelectedIndex(-1);
        canal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canal1ActionPerformed(evt);
            }
        });

        canal3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        canal3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "R (RGB)", "G (RGB)", "B (RGB)", "Y (YIQ)", "I (YIQ)", "Q (YIQ)", "H (HSV)", "S (HSV)", "V (HSV)", "C (CMY)", "M (CMY)", "Y (CMY)", "Y (YCbCr)", "Cb (YCbCr)", "Cr (YCbCr)" }));
        canal3.setSelectedIndex(-1);
        canal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canal3ActionPerformed(evt);
            }
        });

        canal2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        canal2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "R (RGB)", "G (RGB)", "B (RGB)", "Y (YIQ)", "I (YIQ)", "Q (YIQ)", "H (HSV)", "S (HSV)", "V (HSV)", "C (CMY)", "M (CMY)", "Y (CMY)", "Y (YCbCr)", "Cb (YCbCr)", "Cr (YCbCr)" }));
        canal2.setSelectedIndex(-1);
        canal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canal2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quadro1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quadro2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quadro3, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(canal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(canal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(canal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(quadro1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(quadro2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quadro3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setText("Imagem Original");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel8.setText("Resultado");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setText("OpenCV");

        abrir.setText("Arquivo");

        menuAbrirImagem.setText("Abrir Imagem");
        menuAbrirImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirImagemActionPerformed(evt);
            }
        });
        abrir.add(menuAbrirImagem);
        abrir.add(jSeparator1);

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        abrir.add(sair);

        jMenuBar1.add(abrir);

        canais.setText("Canais");

        rgb.setText("RGB ");
        rgb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbActionPerformed(evt);
            }
        });
        canais.add(rgb);

        yiq.setText("YIQ");
        yiq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yiqActionPerformed(evt);
            }
        });
        canais.add(yiq);

        hsv.setText("HSV");
        hsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsvActionPerformed(evt);
            }
        });
        canais.add(hsv);

        cmy.setText("CMY");
        cmy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmyActionPerformed(evt);
            }
        });
        canais.add(cmy);

        ycbcr.setText("YCbCr");
        ycbcr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ycbcrActionPerformed(evt);
            }
        });
        canais.add(ycbcr);

        jMenuBar1.add(canais);

        detectarBordas.setText("Detectar Bordas");

        pCanny.setText("Canny");
        pCanny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCannyActionPerformed(evt);
            }
        });
        detectarBordas.add(pCanny);

        sobel.setText("Sobel");
        sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelActionPerformed(evt);
            }
        });
        detectarBordas.add(sobel);

        jMenuItem1.setText("Espaço Vetorial de Cores");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        detectarBordas.add(jMenuItem1);

        jMenuBar1.add(detectarBordas);

        equalizar.setText("Equalização");

        aleatoria.setText("Aleatória");
        aleatoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aleatoriaActionPerformed(evt);
            }
        });
        equalizar.add(aleatoria);

        eCanais.setText("Canais");
        eCanais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eCanaisActionPerformed(evt);
            }
        });
        equalizar.add(eCanais);

        eHSV.setText("Canal S (HSV)");
        eHSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eHSVActionPerformed(evt);
            }
        });
        equalizar.add(eHSV);

        eYIQ.setText("Canal Y (YIQ)");
        eYIQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eYIQActionPerformed(evt);
            }
        });
        equalizar.add(eYIQ);

        jMenuBar1.add(equalizar);

        imagens.setText("Imagens");

        diferenca.setText("Diferença");
        diferenca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diferencaActionPerformed(evt);
            }
        });
        imagens.add(diferenca);

        jMenuBar1.add(imagens);

        openCV.setText("OpenCV");

        canny.setText("Canny");
        canny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cannyActionPerformed(evt);
            }
        });
        openCV.add(canny);

        equalizacao.setText("Equalização");
        equalizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizacaoActionPerformed(evt);
            }
        });
        openCV.add(equalizacao);

        otsuOpen.setText("Otsu");
        otsuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otsuOpenActionPerformed(evt);
            }
        });
        openCV.add(otsuOpen);

        sobelOpen.setText("Sobel");
        sobelOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelOpenActionPerformed(evt);
            }
        });
        openCV.add(sobelOpen);

        jMenuBar1.add(openCV);

        aQuantitativa.setText("Análise Quantitativa");

        qBorda.setText("Quantidade de pixels de borda");
        qBorda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qBordaActionPerformed(evt);
            }
        });
        aQuantitativa.add(qBorda);

        visual.setText("Visual");
        visual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualActionPerformed(evt);
            }
        });
        aQuantitativa.add(visual);

        jMenuBar1.add(aQuantitativa);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagemOQuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultadoQuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(openCVQuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openCVQuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultadoQuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imagemOQuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuAbrirImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirImagemActionPerformed
        // TODO add your handling code here:
        File arquivoImagem;  
        ImagemOriginal imagemOriginal;
      
        int returnValue = abrirImagem.showOpenDialog(null);        
        if (returnValue == JFileChooser.APPROVE_OPTION) 
        {            
            quadros[4].setImagem(null);
            quadros[5].setImagem(null);
            quadros[4].getQuadro().setIcon(null);
            quadros[5].getQuadro().setIcon(null);
            arquivoImagem = abrirImagem.getSelectedFile();
            canais.setEnabled(true);
            openCV.setEnabled(true);
            detectarBordas.setEnabled(true);
            equalizar.setEnabled(true);
            try 
            {     
               
               setTitle(abrirImagem.getName(arquivoImagem).replaceAll(".jpg", "")+" - Segmentador de Imagens Coloridas");
               
               imagemOriginal = new ImagemOriginal(arquivoImagem);                          
               quadros[3].setImagem(imagemOriginal.getOriginalImage());  
               nomeImagem = abrirImagem.getName(arquivoImagem).replaceAll(".jpg", "");
               quadros[3].setNome(nomeImagem + " (Imagem Original)");
               limpaCanais();
               imagem = new Processamento(quadros[3]);
               imagem.calculaCanais();
               
               ImageIcon i = new ImageIcon(quadros[3].getImagem());
               Image s = i.getImage().getScaledInstance( quadros[3].getQuadro().getWidth(),  quadros[3].getQuadro().getHeight(), Image.SCALE_DEFAULT);
               i.setImage(s);
               quadros[3].getQuadro().setIcon(i);  
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_menuAbrirImagemActionPerformed
    
    private void limpaCanais(){
        canal1.setEnabled(true);
        canal2.setEnabled(true);
        canal3.setEnabled(true);
        canal1.setSelectedIndex(-1);
        canal2.setSelectedIndex(-1);
        canal3.setSelectedIndex(-1);
        quadros[0].setImagem(null);
        quadros[1].setImagem(null);
        quadros[2].setImagem(null);
        quadros[0].getQuadro().setIcon(null);
        quadros[1].getQuadro().setIcon(null);
        quadros[2].getQuadro().setIcon(null);     
    }
    
    private void rgbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbActionPerformed
        // TODO add your handling code here: 
        canal1.setSelectedIndex(0);
        canal2.setSelectedIndex(1);
        canal3.setSelectedIndex(2);        
        detectarBordas.setEnabled(true);
       
    }//GEN-LAST:event_rgbActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        // TODO add your handling code here:
        int returnValue = salvarImagem.showSaveDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) 
        {
            File f = salvarImagem.getSelectedFile();
            
            String nome = f.getAbsolutePath();
            
            if (!nome.endsWith(".bmp"))    
                 nome += ".bmp";             
            
            switch(quadroClicado){
                
                case 1: try {
                            ImageIO.write(quadros[0].getImagem(), "bmp", new File(nome));
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                case 2: try {
                            ImageIO.write(quadros[1].getImagem(), "bmp", new File(nome));
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                case 3: try {
                            ImageIO.write(quadros[2].getImagem(), "bmp", new File(nome));
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                case 4: try {
                            ImageIO.write(quadros[3].getImagem(), "bmp", new File(nome));
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
               
                case 5: try {
                            ImageIO.write(quadros[4].getImagem(), "bmp", new File(nome));
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                case 6: try {
                            ImageIO.write(quadros[5].getImagem(), "bmp", new File(nome));
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
            
                default:
                        break;
            } 
        }
    }//GEN-LAST:event_salvarActionPerformed

    private void tamanhoOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamanhoOriginalActionPerformed
        // TODO add your handling code here:
         switch(quadroClicado){
                
                case 1: try {
                            ImagemOriginal i = new ImagemOriginal(quadros[0]);
                            i.colocaImagem();
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }                        
                        break;
                        
                case 2: try {
                            ImagemOriginal i = new ImagemOriginal(quadros[1]);
                            i.colocaImagem();
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }                        
                        break;
                        
                case 3: try {
                            ImagemOriginal i = new ImagemOriginal(quadros[2]);
                            i.colocaImagem();
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }                        
                        break;
                        
                case 4: try {
                            ImagemOriginal i = new ImagemOriginal(quadros[3]);
                            i.colocaImagem();
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }                        
                        break;
               
                case 5: try {
                            ImagemOriginal i = new ImagemOriginal(quadros[4]);
                            i.colocaImagem();
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }                        
                        break;
                        
                case 6: try {
                            ImagemOriginal i = new ImagemOriginal(quadros[5]);
                            i.colocaImagem();
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }                        
                        break;
            
                default:
                        break;
            } 
    }//GEN-LAST:event_tamanhoOriginalActionPerformed

    private void quadro1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quadro1MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
                quadroClicado = 1;               
                if(canal1.getSelectedIndex() == -1){                    
                    salvar.setEnabled(false);
                    tamanhoOriginal.setEnabled(false);
                    limpar.setEnabled(false);
                }
                else{
                    salvar.setEnabled(true);
                    tamanhoOriginal.setEnabled(true);
                    limpar.setEnabled(true);
                }           
            menuImagem.show(quadro1, evt.getX(), evt.getY());           
        }
    }//GEN-LAST:event_quadro1MouseClicked

    private void quadro2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quadro2MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            quadroClicado = 2;
            if(canal2.getSelectedIndex() == -1){
                    salvar.setEnabled(false);
                    tamanhoOriginal.setEnabled(false);
                    limpar.setEnabled(false);
            }
            else{
                salvar.setEnabled(true);
                tamanhoOriginal.setEnabled(true);
                limpar.setEnabled(true);
            }   
            menuImagem.show(quadro2, evt.getX(), evt.getY());             
        }
    }//GEN-LAST:event_quadro2MouseClicked

    private void quadro3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quadro3MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            quadroClicado = 3;
            if(canal3.getSelectedIndex() == -1){
                salvar.setEnabled(false);
                tamanhoOriginal.setEnabled(false);
                limpar.setEnabled(false);
            }
            else{
                salvar.setEnabled(true);
                tamanhoOriginal.setEnabled(true);
                limpar.setEnabled(true);
            }   
            menuImagem.show(quadro3, evt.getX(), evt.getY());            
        }
    }//GEN-LAST:event_quadro3MouseClicked

    private void imagemOQuadroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagemOQuadroMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            quadroClicado = 4;
            if(quadros[3].getImagem() == null){
                salvar.setEnabled(false);
                tamanhoOriginal.setEnabled(false);
                limpar.setEnabled(false);
            }
            else{
                salvar.setEnabled(true);
                tamanhoOriginal.setEnabled(true);
                limpar.setEnabled(true);
            }   
            menuImagem.show(imagemOQuadro, evt.getX(), evt.getY());            
        }
    }//GEN-LAST:event_imagemOQuadroMouseClicked

    private void resultadoQuadroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultadoQuadroMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            quadroClicado = 5;
            if(quadros[4].getImagem() == null){
                salvar.setEnabled(false);
                tamanhoOriginal.setEnabled(false);
                limpar.setEnabled(false);
            }
            else{
                salvar.setEnabled(true);
                tamanhoOriginal.setEnabled(true);
                limpar.setEnabled(true);
            }   
            menuImagem.show(resultadoQuadro, evt.getX(), evt.getY());            
        }
    }//GEN-LAST:event_resultadoQuadroMouseClicked

    private void openCVQuadroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openCVQuadroMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            quadroClicado = 6;
            if(quadros[5].getImagem() == null){
                salvar.setEnabled(false);
                tamanhoOriginal.setEnabled(false);
                limpar.setEnabled(false);
            }
            else{
                salvar.setEnabled(true);
                tamanhoOriginal.setEnabled(true);
                limpar.setEnabled(true);
            }   
            menuImagem.show(openCVQuadro, evt.getX(), evt.getY());            
        }
    }//GEN-LAST:event_openCVQuadroMouseClicked

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_sairActionPerformed

    private void sobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelActionPerformed
        // TODO add your handling code here:
        DetectarBordaTela d = new DetectarBordaTela();
        int i; boolean aux = true;
        ArrayList<Integer> cSelecionados = new ArrayList();
        do{
            i = JOptionPane.showConfirmDialog(null,
                           d,
                           "Detectar bordas com Sobel",
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE);
           if(i == 0){
               if(!verificaCanaisSelecionados(d))
                   JOptionPane.showMessageDialog(null, "É necessário selecionar pelo menos um canal", "Aviso", JOptionPane.WARNING_MESSAGE);
               else {
                   aux = false;
                   quadros[4].setImagem(copiaImagem(quadros[3].getImagem()));
                   quadros[4].setNome(nomeImagem + " - Sobel");
                   canaisSelecionados(d, cSelecionados);                    
                   imagem.sobel(cSelecionados, tecnicaSelecionada(d), quadros[4]);
                   if(quadros[5].getImagem() != null){
                        imagens.setEnabled(true);
                        aQuantitativa.setEnabled(true);
                   }
               }
           }
           else aux = false;
           
        }while(aux);
    }//GEN-LAST:event_sobelActionPerformed
    
    private String tecnicaSelecionada(DetectarBordaTela d){
        String tecnica = "";
        
        if(d.getrAnd().isSelected())
            tecnica = "And";
        
        if(d.getrColorido().isSelected())
            tecnica = "Colorido";
        
        if(d.getrMagnitude().isSelected())
            tecnica = "Magnitude";
        
        if(d.getrMaximo().isSelected())
            tecnica = "Máximo";
        
        if(d.getrMedia().isSelected())
            tecnica = "Média";
        
        if(d.getrMinimo().isSelected())
            tecnica = "Mínimo";
        
        if(d.getrOr().isSelected())
            tecnica = "Or";
        
        if(d.getrXor().isSelected())
            tecnica = "Xor";
        
        return tecnica;
    }
    
    private String tecnicaSEqualizacao(EqualizacaoTela e){
        String tecnica = "";
        
        if(e.getrAnd().isSelected())
            tecnica = "And";
        
        if(e.getrColorido().isSelected())
            tecnica = "Colorido";
        
        if(e.getrMagnitude().isSelected())
            tecnica = "Magnitude";
        
        if(e.getrMaximo().isSelected())
            tecnica = "Máximo";
        
        if(e.getrMedia().isSelected())
            tecnica = "Média";
        
        if(e.getrMinimo().isSelected())
            tecnica = "Mínimo";
        
        if(e.getrOr().isSelected())
            tecnica = "Or";
        
        if(e.getrXor().isSelected())
            tecnica = "Xor";
        
        return tecnica;
    }
    
    private boolean verificaCanaisSelecionados(DetectarBordaTela c){
    
        if (    c.getcR1().isSelected() || c.getcG1().isSelected() || c.getcB1().isSelected() || 
                c.getcY1().isSelected() || c.getcI1().isSelected() || c.getcQ1().isSelected() ||
                c.getcH1().isSelected() || c.getcS1().isSelected() || c.getcV1().isSelected() ||
                c.getcC1().isSelected() || c.getcM1().isSelected() || c.getcYY1().isSelected() ||
                c.getcYYY1().isSelected() || c.getcCb().isSelected() || c.getcCr().isSelected()
                )        
            return true;
        else return false;        
     
    }
    
     private boolean verificaCSEqualizacao(EqualizacaoTela e){
        boolean aux;
        
        if (   ( e.getcR1().isSelected() || e.getcG1().isSelected() || e.getcB1().isSelected() || 
                e.getcY1().isSelected() || e.getcI1().isSelected() || e.getcQ1().isSelected() ||
                e.getcH1().isSelected() || e.getcS1().isSelected() || e.getcV1().isSelected() ||
                e.getcC1().isSelected() || e.getcM1().isSelected() || e.getcYY1().isSelected() ||
                e.getcYYY1().isSelected() || e.getcCb1().isSelected() || e.getcCr1().isSelected() )
                
                &&
                
               ( e.getcR2().isSelected() || e.getcG2().isSelected() || e.getcB2().isSelected() || 
                e.getcY2().isSelected() || e.getcI2().isSelected() || e.getcQ2().isSelected() ||
                e.getcH2().isSelected() || e.getcS2().isSelected() || e.getcV2().isSelected() ||
                e.getcC2().isSelected() || e.getcM2().isSelected() || e.getcYY2().isSelected() ||
                e.getcYYY_2().isSelected() || e.getcCb_2().isSelected() || e.getcCr_2().isSelected() )
                
                &&
                
                ( e.getcR3().isSelected() || e.getcG3().isSelected() || e.getcB3().isSelected() || 
                e.getcY3().isSelected() || e.getcI3().isSelected() || e.getcQ3().isSelected() ||
                e.getcH3().isSelected() || e.getcS3().isSelected() || e.getcV3().isSelected() ||
                e.getcC3().isSelected() || e.getcM3().isSelected() || e.getcYY3().isSelected() ||
                e.getcYYY_3().isSelected() || e.getcCb_3().isSelected() || e.getcCr_3().isSelected() )
                
                )        
            aux = true;
        else 
            aux = false;       
        
        return aux;   
    }
    
    private void canaisSelecionados(DetectarBordaTela d, ArrayList<Integer> cSelecionados){        
        
        if (d.getcR1().isSelected() )
            cSelecionados.add(0);
        
        if (d.getcG1().isSelected() )
            cSelecionados.add(1);
        
        if (d.getcB1().isSelected() )
            cSelecionados.add(2);
        
        if (d.getcY1().isSelected() )
            cSelecionados.add(3);
        
        if (d.getcI1().isSelected() )
            cSelecionados.add(4);
        
        if (d.getcQ1().isSelected() )
            cSelecionados.add(5);
        
        if (d.getcH1().isSelected() )
            cSelecionados.add(6);
        
        if (d.getcS1().isSelected() )
            cSelecionados.add(7);
        
        if (d.getcV1().isSelected() )
            cSelecionados.add(8);  
        
        if (d.getcC1().isSelected() )
            cSelecionados.add(9);
        
        if (d.getcM1().isSelected() )
            cSelecionados.add(10);
        
        if (d.getcYY1().isSelected() )
            cSelecionados.add(11); 
        
        if (d.getcYYY1().isSelected() )
            cSelecionados.add(12);
        
        if (d.getcCb().isSelected() )
            cSelecionados.add(13);
        
        if (d.getcCr().isSelected() )
            cSelecionados.add(14); 
     
    }
    
    private void canaisSEqualizacao(EqualizacaoTela e, ArrayList<Integer> cSelecionados1, ArrayList<Integer> cSelecionados2, ArrayList<Integer> cSelecionados3){        
        
        if (e.getcR1().isSelected() )
            cSelecionados1.add(0);
        
        if (e.getcG1().isSelected() )
            cSelecionados1.add(1);
        
        if (e.getcB1().isSelected() )
            cSelecionados1.add(2);
        
        if (e.getcY1().isSelected() )
            cSelecionados1.add(3);
        
        if (e.getcI1().isSelected() )
            cSelecionados1.add(4);
        
        if (e.getcQ1().isSelected() )
            cSelecionados1.add(5);
        
        if (e.getcH1().isSelected() )
            cSelecionados1.add(6);
        
        if (e.getcS1().isSelected() )
            cSelecionados1.add(7);
        
        if (e.getcV1().isSelected() )
            cSelecionados1.add(8);  
        
        if (e.getcC1().isSelected() )
            cSelecionados1.add(9);
        
        if (e.getcM1().isSelected() )
            cSelecionados1.add(10);
        
        if (e.getcYY1().isSelected() )
            cSelecionados1.add(11);
        
        if (e.getcYYY1().isSelected() )
            cSelecionados1.add(12); 
        
        if (e.getcCb1().isSelected() )
            cSelecionados1.add(13); 
        
        if (e.getcCr1().isSelected() )
            cSelecionados1.add(14); 
        
        if (e.getcR2().isSelected() )
            cSelecionados2.add(0);
        
        if (e.getcG2().isSelected() )
            cSelecionados2.add(1);
        
        if (e.getcB2().isSelected() )
            cSelecionados2.add(2);
        
        if (e.getcY2().isSelected() )
            cSelecionados2.add(3);
        
        if (e.getcI2().isSelected() )
            cSelecionados2.add(4);
        
        if (e.getcQ2().isSelected() )
            cSelecionados2.add(5);
        
        if (e.getcH2().isSelected() )
            cSelecionados2.add(6);
        
        if (e.getcS2().isSelected() )
            cSelecionados2.add(7);
        
        if (e.getcV2().isSelected() )
            cSelecionados2.add(8);  
        
        if (e.getcC2().isSelected() )
            cSelecionados2.add(9);
        
        if (e.getcM2().isSelected() )
            cSelecionados2.add(10);
        
        if (e.getcYY2().isSelected() )
            cSelecionados2.add(11);
        
        if (e.getcYYY_2().isSelected() )
            cSelecionados2.add(12); 
        
        if (e.getcCb_2().isSelected() )
            cSelecionados2.add(13); 
        
        if (e.getcCr_2().isSelected() )
            cSelecionados2.add(14); 
        
        if (e.getcR3().isSelected() )
            cSelecionados3.add(0);
        
        if (e.getcG3().isSelected() )
            cSelecionados3.add(1);
        
        if (e.getcB3().isSelected() )
            cSelecionados3.add(2);
        
        if (e.getcY3().isSelected() )
            cSelecionados3.add(3);
        
        if (e.getcI3().isSelected() )
            cSelecionados3.add(4);
        
        if (e.getcQ3().isSelected() )
            cSelecionados3.add(5);
        
        if (e.getcH3().isSelected() )
            cSelecionados3.add(6);
        
        if (e.getcS3().isSelected() )
            cSelecionados3.add(7);
        
        if (e.getcV3().isSelected() )
            cSelecionados3.add(8);  
        
        if (e.getcC3().isSelected() )
            cSelecionados3.add(9);
        
        if (e.getcM3().isSelected() )
            cSelecionados3.add(10);
        
        if (e.getcYY3().isSelected() )
            cSelecionados3.add(11);
        
        if (e.getcYYY_3().isSelected() )
            cSelecionados3.add(12); 
        
        if (e.getcCb_3().isSelected() )
            cSelecionados3.add(13); 
        
        if (e.getcCr_3().isSelected() )
            cSelecionados3.add(14); 
     
    }
    
    private void yiqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yiqActionPerformed
        // TODO add your handling code here: 
        canal1.setSelectedIndex(3);
        canal2.setSelectedIndex(4);
        canal3.setSelectedIndex(5);       
        detectarBordas.setEnabled(true);
    }//GEN-LAST:event_yiqActionPerformed

    private void hsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsvActionPerformed
        // TODO add your handling code here:     
        canal1.setSelectedIndex(6);
        canal2.setSelectedIndex(7);
        canal3.setSelectedIndex(8);     
        detectarBordas.setEnabled(true);       
    }//GEN-LAST:event_hsvActionPerformed

    private void cmyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmyActionPerformed
        // TODO add your handling code here:  
        canal1.setSelectedIndex(9);
        canal2.setSelectedIndex(10);
        canal3.setSelectedIndex(11);       
        detectarBordas.setEnabled(true);
    }//GEN-LAST:event_cmyActionPerformed

    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        // TODO add your handling code here:
        switch(quadroClicado){
                
                case 1: quadros[0].getQuadro().setIcon(null);
                        quadros[0].setImagem(null);                       
                        canal1.setSelectedIndex(-1);                     
                        detectarBordas.setEnabled(false);
                        break;
                        
                case 2: quadros[1].getQuadro().setIcon(null);
                        quadros[1].setImagem(null);   
                        canal2.setSelectedIndex(-1);                        
                        detectarBordas.setEnabled(false);
                        break;
                        
                case 3: quadros[2].getQuadro().setIcon(null);
                        quadros[2].setImagem(null);    
                        canal3.setSelectedIndex(-1);                        
                        detectarBordas.setEnabled(false);
                        break;
                        
                case 4: imagemOQuadro.setIcon(null);
                        quadro1.setIcon(null);
                        quadro2.setIcon(null);
                        quadro3.setIcon(null);
                        resultadoQuadro.setIcon(null);
                        openCVQuadro.setIcon(null);
                        quadros[0].setImagem(null); 
                        quadros[1].setImagem(null); 
                        quadros[2].setImagem(null); 
                        quadros[3].setImagem(null); 
                        quadros[4].setImagem(null); 
                        quadros[5].setImagem(null); 
                        canais.setEnabled(false);
                        openCV.setEnabled(false);
                        detectarBordas.setEnabled(false);
                        imagens.setEnabled(false);
                        equalizar.setEnabled(false);
                        aQuantitativa.setEnabled(false);
                        canal1.setSelectedIndex(-1);
                        canal2.setSelectedIndex(-1);
                        canal3.setSelectedIndex(-1);
                        canal1.setEnabled(false);
                        canal2.setEnabled(false);
                        canal3.setEnabled(false);                      
                        break;
               
                case 5: resultadoQuadro.setIcon(null);
                        quadros[4].setImagem(null);                
                        imagens.setEnabled(false);
                        aQuantitativa.setEnabled(false);
                        break;
                        
                case 6: openCVQuadro.setIcon(null);
                        quadros[5].setImagem(null);                
                        imagens.setEnabled(false);
                        aQuantitativa.setEnabled(false);
                        break;
            
                default:
                        break;
            } 
        
    }//GEN-LAST:event_limparActionPerformed

    private void diferencaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diferencaActionPerformed
        // TODO add your handling code here:
                
        try {
            imagem.diferenca(quadros[4], quadros[5]);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_diferencaActionPerformed

    private void otsuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otsuOpenActionPerformed
        // TODO add your handling code here:
        quadros[5].setNome(nomeImagem);
        try {
            imagem.otsu(quadros[5],true);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(quadros[4].getImagem() != null)
            imagens.setEnabled(true);
    }//GEN-LAST:event_otsuOpenActionPerformed

    private void sobelOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelOpenActionPerformed
        // TODO add your handling code here:
        quadros[5].setNome(nomeImagem);
        try {
            imagem.sobelOpenCV(quadros[5]);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(quadros[4].getImagem() != null){
            imagens.setEnabled(true);
            aQuantitativa.setEnabled(true);
        }
    }//GEN-LAST:event_sobelOpenActionPerformed

    private void cannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cannyActionPerformed
        // TODO add your handling code here:
        quadros[5].setNome(nomeImagem);
        try {
            imagem.cannyOpenCV(quadros[5], 50, 150);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(quadros[4].getImagem() != null){
            imagens.setEnabled(true);
            aQuantitativa.setEnabled(true);
        }
    }//GEN-LAST:event_cannyActionPerformed

    private void canal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canal1ActionPerformed
        // TODO add your handling code here:        
        colocaImagemCanais(0, canal1);
    }//GEN-LAST:event_canal1ActionPerformed

    private void canal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canal2ActionPerformed
        // TODO add your handling code here:
        colocaImagemCanais(1, canal2);
    }//GEN-LAST:event_canal2ActionPerformed

    private void canal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canal3ActionPerformed
        // TODO add your handling code here:
        colocaImagemCanais(2, canal3);
    }//GEN-LAST:event_canal3ActionPerformed

    private void pCannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCannyActionPerformed
        // TODO add your handling code here:
        DetectarBordaTela d = new DetectarBordaTela();
        int i; boolean aux = true;
        ArrayList<Integer> cSelecionados = new ArrayList();
        do{
            i = JOptionPane.showConfirmDialog(null,
                           d,
                           "Detectar bordas com Canny",
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE);
           if(i == 0){
               
               if(!verificaCanaisSelecionados(d))
                   JOptionPane.showMessageDialog(null, "É necessário selecionar pelo menos um canal", "Aviso", JOptionPane.WARNING_MESSAGE);
               else {
                   aux = false;                                   
                   canaisSelecionados(d, cSelecionados);
                   
                   double limiarOtsu = 0;
                   
                   try {
                        limiarOtsu = imagem.otsu(quadros[0],false);
                   } catch (IOException ex) {
                        Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   LimiarTela t = new LimiarTela ((float)limiarOtsu); 

                   int j = JOptionPane.showConfirmDialog(null,
                                       t,
                                       "Valores das limiares inferior e superior para Canny",
                                       JOptionPane.OK_CANCEL_OPTION,
                                       JOptionPane.PLAIN_MESSAGE);
                   if (j == 0){
                        quadros[4].setImagem(copiaImagem(quadros[3].getImagem()));  
                        quadros[4].setNome(nomeImagem + " - Canny");
                        quadros[5].setNome(nomeImagem);
                       try {
                           imagem.cannyOpenCV(quadros[4], Float.parseFloat(t.getlIV().getText()), Float.parseFloat(t.getlSV().getText()), cSelecionados, tecnicaSelecionada(d));
                           imagem.cannyOpenCV(quadros[5], Float.parseFloat(t.getlIV().getText()), Float.parseFloat(t.getlSV().getText()));
                       } catch (IOException ex) {
                           Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                       }
                        imagem.colocarImagemQuadro(quadros[4], ""); 
                        imagem.colocarImagemQuadro(quadros[5], "");
                   }
                 
                   
                   if(quadros[5].getImagem() != null){
                        imagens.setEnabled(true);
                        aQuantitativa.setEnabled(true);
                   }
               }
           }
           else aux = false;
           
        }while(aux);        
       
    }//GEN-LAST:event_pCannyActionPerformed

    private void eCanaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eCanaisActionPerformed
        // TODO add your handling code here:
       
        EqualizacaoTela e = new EqualizacaoTela();       
        
        int i; boolean aux = true;
        ArrayList<Integer> cSelecionados1 = new ArrayList();
        ArrayList<Integer> cSelecionados2 = new ArrayList();
        ArrayList<Integer> cSelecionados3 = new ArrayList();
        do{
            i = JOptionPane.showConfirmDialog(null,
                           e,
                           "Equalização de canais",
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE);
           if(i == 0){
               if(!verificaCSEqualizacao(e))
                   JOptionPane.showMessageDialog(null, "É necessário selecionar pelo menos um canal nos canais 1, 2 e 3", "Aviso", JOptionPane.WARNING_MESSAGE);
               else {
                   aux = false;
                   quadros[4].setImagem(copiaImagem(quadros[3].getImagem()));
                   quadros[4].setNome(nomeImagem + " - Equalização de Canais");
                   canaisSEqualizacao(e, cSelecionados1, cSelecionados2, cSelecionados3);                    
                   try {
                       imagem.equalizacao(cSelecionados1, cSelecionados2, cSelecionados3, tecnicaSEqualizacao(e), quadros[4], false, "",0);
                   } catch (IOException ex) {
                       Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   if(quadros[5].getImagem() != null)
                        imagens.setEnabled(true);
               }
           }
           else aux = false;
           
        }while(aux);
    }//GEN-LAST:event_eCanaisActionPerformed

    private void equalizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizacaoActionPerformed
        // TODO add your handling code here:
        quadros[5].setImagem(copiaImagem(quadros[3].getImagem()));
        quadros[5].setNome(nomeImagem);
        try {
            imagem.equalizacaoOpenCV(quadros[5]);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(quadros[4].getImagem() != null)
              imagens.setEnabled(true);
    }//GEN-LAST:event_equalizacaoActionPerformed

    private void aleatoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aleatoriaActionPerformed
        // TODO add your handling code here:
        int i;
        GerarAleatoriaTela g = new GerarAleatoriaTela();
        
        i = JOptionPane.showConfirmDialog(null,
                           g,
                           "Geração de imagens com equalizações aleatórias",
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE); 
        
        if(i == 0){
            int returnValue = salvarAleatoriamente.showSaveDialog(this);
            
            if (returnValue == JFileChooser.APPROVE_OPTION){
                    File f = salvarAleatoriamente.getSelectedFile();
            
                    String nome = f.getAbsolutePath();
                    int vezes;
                    
                    if(g.getjRadioButton1().isSelected())
                        vezes = 10;                    
                    else if(g.getjRadioButton2().isSelected())
                        vezes = 20;
                    else if(g.getjRadioButton3().isSelected())
                        vezes = 30;
                    else
                        vezes = 40;
                    
                try {
                    for(int j = 0; j < vezes ; j++)
                        imagem.equalizaAleatoriamente(quadros[3], j+1, nome);
                    JOptionPane.showMessageDialog(null, "Foram geradas "+vezes+" imagens com equalização aleatória em: "+f.getParent(), "Imagens Geradas", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        
        }
    }//GEN-LAST:event_aleatoriaActionPerformed

    private void ycbcrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ycbcrActionPerformed
        // TODO add your handling code here:
        canal1.setSelectedIndex(12);
        canal2.setSelectedIndex(13);
        canal3.setSelectedIndex(14);       
        detectarBordas.setEnabled(true);
    }//GEN-LAST:event_ycbcrActionPerformed

    private void eHSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eHSVActionPerformed
        // TODO add your handling code here:
        quadros[4].setImagem(copiaImagem(quadros[3].getImagem()));
        quadros[4].setNome(nomeImagem + " - Equalização do Canal V(HSV)");
        try {
            imagem.equalizacaoHSV(quadros[4]);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eHSVActionPerformed

    private void eYIQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eYIQActionPerformed
        // TODO add your handling code here:
        quadros[4].setImagem(copiaImagem(quadros[3].getImagem()));
        quadros[4].setNome(nomeImagem + " - Equalização do Canal Y(YIQ)");
        try {
            imagem.equalizacaoYIQ(quadros[4]);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eYIQActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // TODO add your handling code here:
            imagem.sobelEVC();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void qBordaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qBordaActionPerformed
        // TODO add your handling code here:
        int qResultado=0, qOpenCV=0;
        
        for(int i = 0; i < quadros[4].getImagem().getWidth();i++)
            for(int j = 0; j < quadros[4].getImagem().getHeight();j++){
                Color cR = new Color(quadros[4].getImagem().getRGB(i, j));
                Color oC =  new Color(quadros[5].getImagem().getRGB(i, j));
                
                if( cR.getRed() != 0)
                    qResultado++;
                if( oC.getRed() != 0 )
                    qOpenCV++;
            }
        System.out.println(qResultado+" "+qOpenCV+" "+(double)qOpenCV/qResultado);
    }//GEN-LAST:event_qBordaActionPerformed

    private void visualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualActionPerformed
        try {
            // TODO add your handling code here:
            BufferedImage visualR = new BufferedImage(quadros[4].getImagem().getWidth()+1, quadros[4].getImagem().getHeight(),quadros[4].getImagem().getType());
            for(int i = 0; i < quadros[4].getImagem().getWidth();i++)
                for(int j = 0; j < quadros[4].getImagem().getHeight();j++){
                    Color r = new Color(quadros[4].getImagem().getRGB(i, j));
                    Color o = new Color(quadros[5].getImagem().getRGB(i, j));                    
                    
                    visualR.setRGB(i, j, new Color(o.getRed(),o.getRed(),o.getRed()).getRGB());
                    
                    if(o.getRed() == 0 && r.getRed() != 0)                        
                        visualR.setRGB(i, j, new Color(r.getRed(),0,0).getRGB());
                    
                }
            Quadro qq = new Quadro(visualR,"Visual",null);
            ImagemOriginal mostra = new ImagemOriginal(qq);
            mostra.colocaImagem();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_visualActionPerformed
       
    public void colocaImagemCanais(int canal, JComboBox combo){
       
        if(quadros[3].getImagem() != null){

            quadros[canal].setImagem(copiaImagem(quadros[3].getImagem()));

            switch(combo.getSelectedIndex()){
                case 0:  imagem.colocarImagemQuadro(quadros[canal], 0, nomeImagem+" - Canal R (RGB)");
                         break;

                case 1:  imagem.colocarImagemQuadro(quadros[canal], 1, nomeImagem+" - Canal G (RGB)");
                         break;

                case 2:  imagem.colocarImagemQuadro(quadros[canal], 2, nomeImagem+" - Canal B (RGB)");
                         break;

                case 3:  imagem.colocarImagemQuadro(quadros[canal], 3, nomeImagem+" - Canal Y (YIQ)");
                         break;

                case 4:  imagem.colocarImagemQuadro(quadros[canal], 4, nomeImagem+" - Canal I (YIQ)");
                         break;

                case 5:  imagem.colocarImagemQuadro(quadros[canal], 5, nomeImagem+" - Canal Q (YIQ)");
                         break;

                case 6:  imagem.colocarImagemQuadro(quadros[canal], 6, nomeImagem+" - Canal H (HSV)");
                         break;

                case 7:  imagem.colocarImagemQuadro(quadros[canal], 7, nomeImagem+" - Canal S (HSV)");
                         break;

                case 8:  imagem.colocarImagemQuadro(quadros[canal], 8, nomeImagem+" - Canal V (HSV)");
                         break;

                case 9:  imagem.colocarImagemQuadro(quadros[canal], 9, nomeImagem+" - Canal C (CMY)");
                         break;

                case 10: imagem.colocarImagemQuadro(quadros[canal], 10, nomeImagem+" - Canal M (CMY)");
                         break;  

                case 11: imagem.colocarImagemQuadro(quadros[canal], 11, nomeImagem+" - Canal Y (CMY)"); 
                         break;
                
                case 12: imagem.colocarImagemQuadro(quadros[canal], 12, nomeImagem+" - Canal Y (YCbCr)");
                         break;  

                case 13: imagem.colocarImagemQuadro(quadros[canal], 13, nomeImagem+" - Canal Cb (YCbCr)"); 
                         break;
                
                case 14: imagem.colocarImagemQuadro(quadros[canal], 14, nomeImagem+" - Canal Cr (YCbCr)");
                         break;                 

                default:    
                         break;

            }
        }
    }
    
    public static BufferedImage copiaImagem(BufferedImage imagem){
        BufferedImage b = new BufferedImage(imagem.getWidth(), imagem.getHeight(), imagem.getType());
        Graphics g = b.getGraphics();
        g.drawImage(imagem, 0, 0, null);
        g.dispose();
        return b;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
                System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aQuantitativa;
    private javax.swing.JMenu abrir;
    private javax.swing.JFileChooser abrirImagem;
    private javax.swing.JMenuItem aleatoria;
    private javax.swing.JMenu canais;
    private javax.swing.JComboBox<String> canal1;
    private javax.swing.JComboBox<String> canal2;
    private javax.swing.JComboBox<String> canal3;
    private javax.swing.JMenuItem canny;
    private javax.swing.JMenuItem cmy;
    private javax.swing.JMenu detectarBordas;
    private javax.swing.JMenuItem diferenca;
    private javax.swing.JMenuItem eCanais;
    private javax.swing.JMenuItem eHSV;
    private javax.swing.JMenuItem eYIQ;
    private javax.swing.JMenuItem equalizacao;
    private javax.swing.JMenu equalizar;
    private javax.swing.JMenuItem hsv;
    private javax.swing.JLabel imagemOQuadro;
    private javax.swing.JMenu imagens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem limpar;
    private javax.swing.JMenuItem menuAbrirImagem;
    private javax.swing.JPopupMenu menuImagem;
    private javax.swing.JMenu openCV;
    private javax.swing.JLabel openCVQuadro;
    private javax.swing.JMenuItem otsuOpen;
    private javax.swing.JMenuItem pCanny;
    private javax.swing.JMenuItem qBorda;
    private javax.swing.JLabel quadro1;
    private javax.swing.JLabel quadro2;
    private javax.swing.JLabel quadro3;
    private javax.swing.JLabel resultadoQuadro;
    private javax.swing.JMenuItem rgb;
    private javax.swing.JMenuItem sair;
    private javax.swing.JMenuItem salvar;
    private javax.swing.JFileChooser salvarAleatoriamente;
    private javax.swing.JFileChooser salvarImagem;
    private javax.swing.JMenuItem sobel;
    private javax.swing.JMenuItem sobelOpen;
    private javax.swing.JMenuItem tamanhoOriginal;
    private javax.swing.JMenuItem visual;
    private javax.swing.JMenuItem ycbcr;
    private javax.swing.JMenuItem yiq;
    // End of variables declaration//GEN-END:variables
}
