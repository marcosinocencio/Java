/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * View.java
 *
 * Created on 09/05/2012, 14:57:16
 */
package Grafos.desenho;

import java.util.ArrayList;
import Grafos.*;
import Grafos.desenho.color.RainbowScale;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
/**
 *
 * @author Danilo Medeiros Eler
 */
public class View extends javax.swing.JFrame {
    int g_d = -1; //Grafo ou Dígrafo
    int topologica = 0;
 
    ArrayList<Integer> vetorTopologica;
    /** Creates new form View */
    public View() {
        this.view = new ViewPanel();
        //this.view.setGraph(this.graph);
        initComponents();        
        algoritmos_Menu.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(this.view);
        jMenuBar1 = new javax.swing.JMenuBar();
        opcoes_Menu = new javax.swing.JMenu();
        carregarGrafo_Menu = new javax.swing.JMenuItem();
        salvarImagem_Menu = new javax.swing.JMenuItem();
        algoritmos_Menu = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        componentesConexas_Menu = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trabalho Prático 2 - Grafos");

        opcoes_Menu.setText("Opções");

        carregarGrafo_Menu.setText("Carregar Grafo");
        carregarGrafo_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carregarGrafo_MenuActionPerformed(evt);
            }
        });
        opcoes_Menu.add(carregarGrafo_Menu);

        salvarImagem_Menu.setText("Salvar Imagem");
        salvarImagem_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarImagem_MenuActionPerformed(evt);
            }
        });
        opcoes_Menu.add(salvarImagem_Menu);

        jMenuBar1.add(opcoes_Menu);

        algoritmos_Menu.setText("Algoritmos");

        jMenuItem5.setText("Árvore Geradora Mínima");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem5);

        jMenuItem4.setText("Busca em Largura");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem4);

        jMenuItem3.setText("Caminho Mínimo");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem3);

        jMenuItem1.setText("Coloração");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem1);

        jMenuItem6.setText("Componentes Fortemente Conexas ");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem6);

        jMenuItem7.setText("Exibir em Ordem Topológica");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem7);

        jMenuItem8.setText("Grafo Euleriano");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem8);

        componentesConexas_Menu.setText("Marcar Componentes Conexas");
        componentesConexas_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentesConexas_MenuActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(componentesConexas_Menu);

        jMenuItem2.setText("Transposição");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem2);

        jMenuBar1.add(algoritmos_Menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void carregarGrafo_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carregarGrafo_MenuActionPerformed
        // TODO add your handling code here:
        int peso = 0;
        JFileChooser fc = new JFileChooser();
        int result;
        topologica = 0;
        result = fc.showOpenDialog(null);
        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getAbsolutePath();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(filename));
                ////////LEMBRAR DE VERIFICAR SE É GRAFO OU DÍGRAFO
                ////////FAZER O TRATAMENTO NA INSERÇÃO DOS DADOS NA ESTRUTURA
                //int grafo = Integer.parseInt(in.readLine());
                g_d =  Integer.parseInt(in.readLine());
                //le numero de vertices
                int nVert =  Integer.parseInt(in.readLine());
                this.graph = new Graph(nVert); ///desenho
                this.grafo = new Grafo(nVert, new ListaAdjacencia()); ///estrutura de dados

                //leitura das arestas
                String line;
                while ((line = in.readLine()) != null && line.trim().length() > 0) {
                    StringTokenizer t1 = new StringTokenizer(line, " ");
                    int vIni = Integer.parseInt(t1.nextToken().trim()); //verticeInicial
                    int vFim = Integer.parseInt(t1.nextToken().trim()); //verticeFinal
                    
                    if (t1.hasMoreTokens())
                        peso = Integer.parseInt(t1.nextToken().trim()); //pegando o peso
                    
                    Vertex vS = this.graph.getVertex().get(vIni);
                    Vertex vT = this.graph.getVertex().get(vFim);
                    Edge e = new Edge(vS, vT, false, peso, 0);
                    if(g_d == 0){
                        this.grafo.addAresta(vIni, vFim, g_d, peso); //estrutura de dados
                        e = new Edge(vS, vT, false, peso, 0); //desenho
                    }
                    else{
                        this.grafo.addAresta(vIni, vFim, 1, peso); //estrutura de dados
                        e = new Edge(vS, vT, true,peso, 0); //desenho
                    }                    
                  
                    e.setSelected(true);                        
                    
                    
                    this.graph.addEdge(e);    //desenho
                    
                }  //se tiver peso nas arestas, adicionar mais uma leitura de token
               
                this.view.setGraph(graph);
                algoritmos_Menu.setEnabled(true);
                if(g_d==0){
                   componentesConexas_Menu.setEnabled(true);
                   jMenuItem1.setEnabled(true);
                   jMenuItem5.setEnabled(true);
                   jMenuItem6.setEnabled(false);
                   jMenuItem2.setEnabled(false);
                   jMenuItem7.setEnabled(false);  
                   jMenuItem8.setEnabled(true); 
                }
                else{
                   componentesConexas_Menu.setEnabled(false);
                   jMenuItem1.setEnabled(false);
                   jMenuItem5.setEnabled(false);
                   jMenuItem6.setEnabled(true);
                   jMenuItem2.setEnabled(true);
                   jMenuItem7.setEnabled(true); 
                   jMenuItem8.setEnabled(false); 
                }
                
                
            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                //fechar o arquivo
                if (in != null) {
                    try {
                        in.close();                        
                    } catch (IOException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_carregarGrafo_MenuActionPerformed

    private void salvarImagem_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarImagem_MenuActionPerformed
        // TODO add your handling code here:
        JFileChooser dialog = new JFileChooser();
        dialog.setMultiSelectionEnabled(false);
        dialog.setDialogTitle("Save file");
        dialog.setCurrentDirectory(new File("C:\\"));
        int result = dialog.showDialog(this, "Salvar");
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String filename = dialog.getSelectedFile().getAbsolutePath();
                this.view.saveToPngImageFile(filename);
            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_salvarImagem_MenuActionPerformed

    private void componentesConexas_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentesConexas_MenuActionPerformed
        // TODO add your handling code here:
        Redesenha(1);
        ComponentesConexas componentesConexas = new ComponentesConexas();
        componentesConexas.execute(grafo);
        int comp[] = componentesConexas.getComponentes();
        int numComp = componentesConexas.getNumComponentes();
        int compStep = 255 / numComp;
        RainbowScale rbS = new RainbowScale();
        for (int i = 0; i < comp.length; i++) {
            System.out.println("Vertice: " + i + " Compoente: " + comp[i]);
            this.graph.getVertex().get(i).setColor(rbS.getColor(comp[i] * compStep));
        }
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_componentesConexas_MenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Redesenha(1);
        Coloracao coloracao = new Coloracao();
        coloracao.execute(grafo);
        int cores[] = coloracao.getCores();
        int nCores = coloracao.getNumCores();
        
        int coresStep = 255 / nCores;
        RainbowScale rbS = new RainbowScale();
        for (int i = 0; i < cores.length; i++) {
            System.out.println("Vertice: " + i + " Cor: " + cores[i]);
            this.graph.getVertex().get(i).setColor(rbS.getColor(cores[i] * coresStep));
        }
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private void RedesenhaT (int op){
        int i=0; 
        this.to = new Topologica(grafo.getRepresentacao().getNumVertices(),  vetorTopologica);
      
        No adj;
        
        while(i < vetorTopologica.size()){
                    adj = ((ListaAdjacencia) grafo.getRepresentacao()).getAdjacentes(vetorTopologica.get(i));
                    
                    while (adj != null) {                       
                        Vertex vS = this.to.getVertex().get(i);
                        Vertex vT = this.to.getVertex().get(vetorTopologica.indexOf(adj.getVertID()));
                        EdgeT e;
                        e = new EdgeT(vS, vT, true, adj.getPeso(), vetorTopologica, grafo);                        
                        if(op==0)
                           e.setSelected(false);
                        else
                           e.setSelected(true); 
                        this.to.addEdgeT(e);
                        adj = adj.getProx();                        
                     }
                    i++;
                }  
      
        this.view.cleanImage();
        this.view.repaint();
    }
    
    private void Redesenha (int op){
        int i=0; 
        Graph g = new Graph(grafo.getRepresentacao().getNumVertices());
        this.graph = g;
        while(i < this.grafo.getRepresentacao().getNumVertices()){
                    No adj = ((ListaAdjacencia) grafo.getRepresentacao()).getAdjacentes(i);
                    while (adj != null) {
                        Vertex vS = this.graph.getVertex().get(i);
                        Vertex vT = this.graph.getVertex().get(adj.getVertID());
                        Edge e = new Edge(vS, vT, true, adj.getPeso(),0);
                        if(g_d == 1)
                            e = new Edge(vS, vT, true, adj.getPeso(),0);
                        else
                            e = new Edge(vS, vT, false, adj.getPeso(),0); 
                        if(op==0)
                           e.setSelected(false);
                        else
                           e.setSelected(true); 
                        this.graph.addEdge(e);
                        adj = adj.getProx();                
                     }

                    i++;
                }
        this.view.setGraph(graph);
        this.view.cleanImage();
        this.view.repaint();
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Grafo tr;
        Transposicao t = new Transposicao();
        tr = t.execute(grafo);
       
        this.grafo = tr;
        
        if (topologica == 0)
            Redesenha(1);       
        else {
            OrdemTopologica o = new OrdemTopologica(grafo);       
            vetorTopologica = o.Topologica();
            RedesenhaT(1);
            topologica = 1;
        }
        
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        
        int caminho[] = new int[grafo.getRepresentacao().getNumVertices()]; 
        int i = 0, j=0; 
        String b;
        
        b = JOptionPane.showInputDialog(null, "Qual é o vértice inicial para encontrar o caminho mínimo?", "Caminho mínimo (Dijkstra)",JOptionPane.DEFAULT_OPTION);
        
            j = Integer.parseInt(b);

            if (j >= grafo.getRepresentacao().getNumVertices() || i < 0)
                JOptionPane.showMessageDialog(null, "Digite um vértice válido", "Aviso", JOptionPane.WARNING_MESSAGE);
            else{                    
                Redesenha(0);
                CaminhoMinimo c = new CaminhoMinimo(grafo);
                caminho = c.Dijkstra(j);       

                No adj;

                while(i < caminho.length){                   
                    if(caminho[i] != -1){
                     adj = ((ListaAdjacencia) grafo.getRepresentacao()).getAdjacentes(caminho[i]);
                    while (adj.getVertID()!= i){
                        adj = adj.getProx();
                    }
                    Vertex vS = this.graph.getVertex().get(caminho[i]);
                    Vertex vT = this.graph.getVertex().get(i);
                    Edge e = new Edge(vS, vT, true, adj.getPeso(),1);
                    if(g_d == 1)
                            e = new Edge(vS, vT, true, adj.getPeso(),1);
                        else
                            e = new Edge(vS, vT, false, adj.getPeso(),1); 
                    e.setSelected(true);
                    this.graph.addEdge(e);
                    }
                    i++;
                } 
        }
        
        this.graph.getVertex().get(j).setColor(Color.yellow);
        this.view.setGraph(graph);
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        int caminho[] = new int[grafo.getRepresentacao().getNumVertices()]; 
        int i = 0, j=0; 
        String b;
        
        b = JOptionPane.showInputDialog(null, "Qual é o vértice inicial?", "Busca em Largura",JOptionPane.DEFAULT_OPTION);
        
            j = Integer.parseInt(b);

            if (j >= grafo.getRepresentacao().getNumVertices() || i < 0)
                JOptionPane.showMessageDialog(null, "Digite um vértice válido", "Aviso", JOptionPane.WARNING_MESSAGE);
            else{                    
                Redesenha(0);
                BuscaLargura c = new BuscaLargura(grafo);
                caminho = c.BFS(j);       

                No adj;

                while(i < caminho.length){
                    if (caminho[i] != -1){
                    adj = ((ListaAdjacencia) grafo.getRepresentacao()).getAdjacentes(caminho[i]);
                    while (adj.getVertID()!= i){
                        adj = adj.getProx();
                    }
                    Vertex vS = this.graph.getVertex().get(caminho[i]);
                    Vertex vT = this.graph.getVertex().get(i);
                    Edge e = new Edge(vS, vT, true, adj.getPeso(),1);
                    if(g_d == 1)
                            e = new Edge(vS, vT, true, adj.getPeso(),1);
                        else
                            e = new Edge(vS, vT, false, adj.getPeso(),1); 
                    e.setSelected(true);
                    this.graph.addEdge(e);
                    }
                    i++;
                } 
        }
        
        this.graph.getVertex().get(j).setColor(Color.yellow);
        this.view.setGraph(graph);
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
            
       OrdemTopologica o = new OrdemTopologica(grafo);       
       vetorTopologica = o.Topologica();
       
       if(o.verificaCiclo())
           JOptionPane.showMessageDialog(null, "Abra um Dígrafo Acíclico para exibir a ordem topológica", "Dígrafo Cíclico", JOptionPane.WARNING_MESSAGE);
       else{
        topologica = 1;   
        RedesenhaT(1);      
        this.view.cleanImage();
        this.view.repaint(); 
       }
       
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        int caminho[] = new int[grafo.getRepresentacao().getNumVertices()]; 
        int i = 0;
        
        
        Redesenha(0);
        AGM a = new AGM(grafo);
        caminho = a.AGM_Prim();
        
         No adj;

            while(i < caminho.length){
                if (caminho[i] != -1){
                adj = ((ListaAdjacencia) grafo.getRepresentacao()).getAdjacentes(caminho[i]);
                while (adj.getVertID()!= i){
                    adj = adj.getProx();
                }
                Vertex vS = this.graph.getVertex().get(caminho[i]);
                Vertex vT = this.graph.getVertex().get(i);
                Edge e = new Edge(vS, vT, false, adj.getPeso(),1);
                e = new Edge(vS, vT, false, adj.getPeso(),1); 
                e.setSelected(true);  
                this.graph.addEdge(e);
                }
                i++;
            }
                
        this.view.setGraph(graph);
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> v = new ArrayList();
        ArrayList<Integer> x = new ArrayList();
        
        BuscaProfundidade b = new BuscaProfundidade(grafo);
        v = b.DFS(2,v,1);
        
        Transposicao t = new Transposicao();        
        
        b = new BuscaProfundidade(t.execute(grafo));
        x = b.DFS(2, v, 2);
        
        Redesenha(1);
        
        int nComp = 1, i=0;
        
        while (i < x.size()){
            if(nComp != x.get(i))
                nComp++;
            i++;
        }
        
        
        RainbowScale rbS = new RainbowScale();
        int compStep = 100 / nComp;
        
        for (i = 0; i < v.size(); i++) {            
            this.graph.getVertex().get(v.get(i)).setColor(rbS.getColor(x.get(i) * compStep));
        }
     
        this.view.setGraph(graph);
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> v = new ArrayList();
        Grafo aux = grafo;
        int verifica,i=0;
        ComponentesConexas componentesConexas = new ComponentesConexas();
        componentesConexas.execute(grafo);
        int numComp = componentesConexas.getNumComponentes();
        //Redesenha(1);
        
        if (numComp == 1){
            GrafoEuleriano g = new GrafoEuleriano(aux);
            verifica = g.verifica();

            if (verifica == 1){             
                JOptionPane.showMessageDialog(null, "O Grafo é Euleriano e há um ciclo", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                v = g.hierholzer(0);

                String caminho = Integer.toString(v.get(i));
                for(i=1; i < v.size(); i++)                
                    caminho += " ---> "+v.get(i);
                JOptionPane.showMessageDialog(null, "Ciclo: \n\n"+caminho, "Ciclo Euleriano", JOptionPane.INFORMATION_MESSAGE);    

            }
            else if (verifica == 2)
                JOptionPane.showMessageDialog(null, "O Grafo não é Euleriano e não é possível encontrar um caminho ou ciclo", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            else{
                JOptionPane.showMessageDialog(null, "O Grafo é Semi Euleriano e há um caminho", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                v = g.hierholzer(verifica);

                String caminho = Integer.toString(v.get(i));
                for(i=1; i < v.size(); i++)                
                    caminho += " ---> "+v.get(i);
                JOptionPane.showMessageDialog(null, "Caminho: \n\n"+caminho, "Caminho Euleriano", JOptionPane.INFORMATION_MESSAGE);    

            }
        }
        else
            JOptionPane.showMessageDialog(null, "Esse grafo não é conexo. Abra um grafo conexo para verificar se ele é ou não Euleriano", "Advertência", JOptionPane.WARNING_MESSAGE);
//        while(i < v.size()-1){
//                 Vertex vS = this.graph.getVertex().get(v.get(i));
//                 Vertex vT = this.graph.getVertex().get(v.get(i+1));
//                 Edge e = new Edge(vS, vT, false, 0,0);
//                 e = new Edge(vS, vT, false, 0,1); 
//                 e.setSelected(true);  
//                 this.graph.addEdge(e);
//                 i++;
//             }
//       this.view.cleanImage();
//       this.view.repaint();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.setBackground(java.awt.Color.WHITE);
            this.setLayout(new FlowLayout(FlowLayout.LEFT));
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;
            ////configuração do rendering para obeter melhor qualidade
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);

            if (graph != null && this.imageBuffer == null) {
                this.imageBuffer = new BufferedImage(graph.getSize().width + 1,
                        graph.getSize().height + 1, BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, graph.getSize().width + 1, graph.getSize().height + 1);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                if(topologica == 0)
                    graph.draw(g2Buffer);
                else                  
                    to.draw(g2Buffer);
                
                g2Buffer.dispose();
            }

            if (this.imageBuffer != null) {
                g2.drawImage(this.imageBuffer, 0, 0, null);
            }
        }

        public void saveToPngImageFile(String filename) throws IOException {
            try {
                //this.paint(this.imageBuffer.getGraphics());
                ImageIO.write(this.imageBuffer, "png", new File(filename));
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void setGraph(Graph graph) {
            if (graph != null) {
                this.setPreferredSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));
                this.setSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));

                this.cleanImage();
                this.repaint();
            }
        }

        public Vertex getMarkedVertex() {
            return markedVertex;
        }

        public void cleanImage() {
            this.imageBuffer = null;
        }

        public void adjustPanel() {
            float iniX = graph.getVertex().get(0).getX();
            float iniY = graph.getVertex().get(0).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = graph.getVertex().get(0).getRay() * 5 + 10;

            for (int i = 1; i < graph.getVertex().size(); i++) {
                float x = graph.getVertex().get(i).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = graph.getVertex().get(i).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (Vertex v : graph.getVertex()) {
                v.setX(v.getX() + zero - min_x);
                v.setY(v.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            this.setSize(d);
            this.setPreferredSize(d);
        }

        public void markVertices(ArrayList<Vertex> vertices) {
            if (vertices != null) {
                this.cleanMarkedVertices(false);

                //change the vertices' colors
                for (Vertex v : vertices) {
                    v.setSelected(true);
                }

                this.cleanImage();
                this.repaint();
            }
        }

        public void cleanMarkedVertices(boolean cleanVertex) {
            if (graph != null) {
                this.markedVertex = null;

                for (Vertex vertex : graph.getVertex()) {
                    vertex.setSelected(false);

                }
            }

            this.cleanImage();
            this.repaint();
        }

        @Override
        public void setFont(java.awt.Font font) {
            //
        }

        @Override
        public java.awt.Font getFont() {
            return null;// colocar alguma fonte
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

        }
        private java.awt.Color color = java.awt.Color.RED;
        //Used to color based on a document
        private Vertex markedVertex;
        //Used to move the points
        private Vertex selectedVertex;
        //contain the selected vertices which will be moved
        private ArrayList<Vertex> selectedVertices;
        //The image which will be drawn as a graph
        private BufferedImage imageBuffer;
    }
    private ViewPanel view;
    private Graph graph;
    private Grafo grafo;
    private Topologica to;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu algoritmos_Menu;
    private javax.swing.JMenuItem carregarGrafo_Menu;
    private javax.swing.JMenuItem componentesConexas_Menu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu opcoes_Menu;
    private javax.swing.JMenuItem salvarImagem_Menu;
    // End of variables declaration//GEN-END:variables
}
